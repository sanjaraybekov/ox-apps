{"version":3,"sources":["../node_modules/libphonenumber-js/es6/constants.js","../node_modules/libphonenumber-js/es6/ParseError.js","../node_modules/libphonenumber-js/es6/tools/semver-compare.js","../node_modules/libphonenumber-js/es6/metadata.js","../node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","../node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","../node_modules/libphonenumber-js/es6/helpers/parseDigits.js","../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","../node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","../node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","../node_modules/libphonenumber-js/es6/helpers/RFC3966.js","../node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","../node_modules/libphonenumber-js/es6/helpers/getNumberType.js","../node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","../node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","../node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","../node_modules/libphonenumber-js/es6/format_.js","../node_modules/libphonenumber-js/es6/PhoneNumber.js","../node_modules/libphonenumber-js/es6/validate_.js","../node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","../node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","../node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","../node_modules/libphonenumber-js/es6/parse_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","../node_modules/libphonenumber-js/es6/getCountries.js","../node_modules/react-phone-number-input/modules/PropTypes.js","../node_modules/input-format/modules/helpers.js","../node_modules/input-format/modules/closeBraces.js","../node_modules/input-format/modules/format.js","../node_modules/input-format/modules/templateFormatter.js","../node_modules/input-format/modules/dom.js","../node_modules/input-format/modules/inputControl.js","../node_modules/input-format/modules/parse.js","../node_modules/input-format/modules/edit.js","../node_modules/input-format/modules/react/Input.js","../node_modules/libphonenumber-js/es6/AsYouTypeState.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js","../node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js","../node_modules/libphonenumber-js/es6/AsYouTypeParser.js","../node_modules/libphonenumber-js/es6/AsYouType.js","../node_modules/react-phone-number-input/modules/helpers/inputValuePrefix.js","../node_modules/react-phone-number-input/modules/InputSmart.js","../node_modules/react-phone-number-input/modules/InputBasic.js","../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","../node_modules/country-flag-icons/modules/unicode.js","../node_modules/react-phone-number-input/modules/CountrySelect.js","../node_modules/react-phone-number-input/modules/Flag.js","../node_modules/react-phone-number-input/modules/InternationalIcon.js","../node_modules/react-phone-number-input/modules/helpers/countries.js","../node_modules/react-phone-number-input/modules/CountryIcon.js","../node_modules/react-phone-number-input/modules/helpers/getInternationalPhoneNumberPrefix.js","../node_modules/react-phone-number-input/modules/helpers/phoneInputHelpers.js","../node_modules/react-phone-number-input/modules/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js","../node_modules/react-phone-number-input/modules/PhoneInputWithCountry.js","../node_modules/react-phone-number-input/modules/PhoneInputWithCountryDefault.js","../node_modules/react-phone-number-input/min/index.js"],"names":["VALID_PUNCTUATION","concat","ParseError","code","instance","Constructor","TypeError","_classCallCheck","this","name","constructor","message","stack","Error","prototype","Object","create","a","split","b","pa","pb","i","na","Number","nb","isNaN","_typeof","obj","Symbol","iterator","_defineProperties","target","props","length","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","CALLING_CODE_REG_EXP","Metadata","metadata","is_object","countries","keys","join","type_of","validateMetadata","setVersion","call","value","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","undefined","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","test","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","getCountryCallingCode","countryCallingCode","isSupportedCountry","version","v4","maxLength","createExtensionPattern","purpose","possibleSeparatorsBetweenNumberAndExtLabel","possibleSeparatorsNumberExtLabelNoComma","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","RegExp","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","EXTN_PATTERN","DIGITS","parseDigit","character","parseDigits","string","result","_iterator","_isArray","Array","isArray","_i","_ref","next","done","digit","parseIncompletePhoneNumber","parsePhoneNumberCharacter","prevParsedCharacters","checkNumberLength","nationalNumber","checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","slice","element","indexOf","push","sort","mergeArrays","actual_length","minimum_length","isPossibleNumber","_slicedToArray","arr","_arrayWithHoles","_arr","_n","_d","_e","_s","err","_iterableToArrayLimit","_nonIterableRest","matchesEntirely","text","regular_expression","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","phone","isNumberTypeEqualTo","pattern","_NON_FIXED_LINE_PHONE","applyInternationalSeparatorStyle","formattedNumber","replace","trim","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalFormat","withNationalPrefix","carrierCode","internationalFormat","SINGLE_IDD_PREFIX_REG_EXP","_defineProperty","DEFAULT_OPTIONS","formatExtension","extension","formatNumber","arguments","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","forEach","_objectSpread","addExtension","formatNationalNumber","_ref2","formatRFC3966","fromCountry","iddPrefix","countryMetadata","getIddPrefix","formatIDD","formatAs","availableFormats","nationalNnumber","leadingDigitsPatterns","lastLeadingDigitsPattern","search","chooseFormatForNumber","PhoneNumber","_metadata","isCountryCode","isNonGeographicCallingCode","phoneNumber","CAPTURING_DIGIT_PATTERN","stripIddPrefix","IDDPrefixPattern","matchedGroups","match","extractNationalNumberFromPossiblyIncompleteNumber","prefixPattern","prefixMatch","exec","capturedGroupsCount","hasCapturedGroups","prefixBeforeNationalNumber","possiblePositionOfTheFirstCapturedGroup","extractNationalNumber","_extractNationalNumbe","nationalSignificantNumber","shouldExtractNationalPrefix","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","possibleShorterNumber","possibleShorterNationalNumber","numberWithoutIDD","_extractCountryCallin","shorterNumber","_countryCallingCode","getCountryByCallingCode","nationalPhoneNumber","possibleCountries","selectCountryFromList","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parseInput","extract","_part$split2","parseRFC3966","throwOnError","startsAt","extractFormattedPhoneNumber","isViablePhoneNumberStart","error","withExtensionStripped","start","numberWithoutExtension","matches","extractExtension","parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","exactCountry","parsePhoneNumber","hasSelectedNumberingPlan","valid","extended","possible","normalizeArguments","args","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","parsePhoneNumberFromString","_normalizeArguments","getCountries","shape","object","isRequired","objectOf","count_occurences","symbol","count","closeBraces","retained_template","template","placeholder","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","caret","formatter","should_close_braces","characters_in_template","value_character_index","filled_in_template","index","found","possibly_last_input_character_index","isReadOnly","hasAttribute","getSelection","selectionStart","selectionEnd","end","Keys","setCaretPosition","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","isAndroid","setSelectionRange","setTimeout","event","_parse","on_change","operation","keyCode","getOperation","preventDefault","selection","eraseSelection","formatInputText","_parse2","parse_character","focused_input_character_index","newValueAndCaret","edit","formatted","_extends","assign","hasOwnProperty","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","ref","parse","InputComponent","inputComponent","onChange","onKeyDown","rest","internalRef","setRef","current","_onChange","_onKeyDown","createElement","isEmptyValue","forwardRef","propTypes","func","elementType","onCut","onPaste","defaultProps","AsYouTypeState","onCountryChange","onCallingCodeChange","properties","_Object$keys","international","missingPlus","digits","resetNationalSignificantNumber","initCountryAndCallingCode","getNationalDigits","nationalSignificantNumberMatchesInput","complexPrefixBeforeNationalSignificantNumber","setCountry","setCallingCode","nextDigits","DIGIT_PLACEHOLDER_MATCHER","repeat","times","cutAndStripNonPairedParens","cutBeforeIndex","pop","cleared_string","_i2","_dangling_braces","stripNonPairedParens","formatCompleteNumber","state","shouldTryNationalPrefixFormattingRule","getSeparatorAfterNationalPrefix","useNationalPrefixFormattingRule","formatNationalNumberWithAndWithoutNationalPrefixFormattingRule","_ref3","formattedNationalNumber","isValidFormattedNationalNumber","PatternMatcher","matchTree","PatternParser","allowOverflow","_match","matchedChars","overflow","characters","tree","last","characterString","partialMatch","restCharacters","JSON","stringify","op","_result","_iterator2","_isArray2","_char","OPERATOR","ILLEGAL_CHARACTER_REGEXP","context","or","instructions","parsePattern","_this$context$","branches","operator","before","rightPart","startContext","getContext","endContext","oneOfSet","parseOneOfSet","values","prevValue","charCodeAt","nextValue","String","fromCharCode","LONGEST_DUMMY_PHONE_NUMBER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","NON_ALTERING_FORMAT_REG_EXP","AsYouTypeFormatter","isNANP","resetFormat","chosenFormat","nationalNumberTemplate","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","matchingFormats","narrowDownMatchingFormats","_this2","formattedCompleteNumber","setNationalNumberTemplate","lastIndexOf","formatNationalNumberWithNextDigits","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","_ref4","_this3","leadingDigitsPatternIndex","formatSuits","formatMatches","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","Math","min","leadingDigitsPattern","console","_this4","_loop2","_ref5","getFormatFormat","createTemplateForFormat","_loop","getTemplateForFormat","_ref6","spacing","internationalPrefix","getInternationalPrefixBeforeCountryCallingCode","getDigitsWithoutInternationalPrefix","_ref7","strictPattern","nationalNumberDummyDigits","nationalPrefixIncludedInTemplate","numberFormat","numberFormatWithNationalPrefix","position","_i3","populateTemplateWithDigits","VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","COMPLEX_NATIONAL_PREFIX","AsYouTypeParser","onNationalSignificantNumberChange","justLeadingPlus","_extractFormattedDigi","_extractFormattedDigi4","extractedNumber","hasPlus","_extractFormattedDigitsAndPlus","formattedDigits","extractFormattedDigitsAndPlus","_extractFormattedDigi2","startInternationalNumber","inputDigits","hasReceivedThreeLeadingDigits","appendDigits","extractIddPrefix","isWaitingForCountryCallingCode","extractCountryCallingCode","appendNationalSignificantNumberDigits","hasExtractedNationalSignificantNumber","extractNationalSignificantNumber","update","couldPossiblyExtractAnotherNationalSignificantNumber","nationalDigits","setState","onExtractedNationalNumber","prevNationalSignificantNumber","_extractNationalNumbe2","nationalSignificantNumberIndex","extractAnotherNationalSignificantNumber","fixMissingPlus","extractCallingCodeAndNationalSignificantNumber","_extractCountryCallin2","newCallingCode","AsYouType","optionsOrDefaultCountry","_this$getCountryAndCa2","getCountryAndCallingCode","reset","_this$parser$input","parser","formattedOutput","determineTheCountryIfNeeded","reExtractNationalSignificantNumber","getFullNumber","getNonFormattedNumber","isInternational","getCallingCode","_getCountry","isCountryCallingCodeAmbiguous","determineTheCountry","prefix","_this$state","getNonFormattedNationalNumberWithPrefix","_this$state2","_this$state3","getNumber","isPossible","isValid","getTemplate","getNonFormattedTemplate","getInputValuePrefix","withCountryCallingCode","removeInputValuePrefix","defaultMetadata","InputSmart","bool","InputBasic","Input","newValue","formatIncompletePhoneNumber","getRegionalIndicatorSymbol","letter","fromCodePoint","toUpperCase","CountrySelect","onChange_","getSelectedOption","label","divider","disabled","style","DIVIDER_STYLE","arrayOf","fontSize","backgroundColor","color","CountrySelectWithIcon","className","Icon","iconComponent","Arrow","getIconAspectRatio","arrowComponent","unicodeFlags","selectedOption","aspectRatio","option","countryName","flags","flagUrl","title","alt","role","src","toLowerCase","InternationalIcon1x1","InternationalIcon3x2","xmlns","viewBox","stroke","fill","strokeWidth","strokeMiterlimit","strokeLinecap","d","x1","y1","x2","y2","isCountrySupportedWithError","getSupportedCountries","createCountryIconComponent","FlagComponent","flagComponent","InternationalIcon","internationalIcon","CountryIcon","_aspectRatio","ONLY_DIGITS_REGEXP","getInternationalPhoneNumberPrefix","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","countryCallingCodePrefix","country_calling_code","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","asYouType","getNumberValue","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","getCountryForPartialE164Number","partialE164Number","required","derived_country","getCountry","getCountryFromPossiblyIncompleteInternationalPhoneNumber","couldNumberBelongToCountry","convertInternationalPhoneDigitsToNational","formatNational","compareStrings","locales","localeCompare","intlPhoneNumberPrefix","getInitialPhoneDigits","generateNationalNumberDigits","enumerableOnly","symbols","getOwnPropertyDescriptors","defineProperties","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","p","_React$PureComponent","PhoneNumberInput_","_possibleConstructorReturn","createRef","inputRef","_this$props","focusInputOnCountrySelection","newPhoneDigits","focus","hasUserSelectedACountry","_phoneDigits","_this$props2","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_onPhoneDigitsChange","prevPhoneDigits","countryRequired","getAnyCountry","_value","onPhoneDigitsChange","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","_this$props3","_international","labels","_addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","_this$props4","_defaultCountry","_countries","preSelectedCountry","getPreSelectedCountry","subClass","superClass","_inherits","prevProps","newDefaultCountry","newReset","prevDefaultCountry","prevReset","_getInitialPhoneDigits","parameters","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","parsedCountry","hasUserSelectedACountryUpdate","supportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","selectedCountry","prevState","generator","dependencies","_this$props5","countryOptionsOrder","order","optionsOnTop","optionsOnBottom","appendTo","splice","sortCountryOptions","countryNames","compareStringsLocales","_compareStrings","countrySelectOptions","unshift","ZZ","countryOptions","getSupportedCountryOptions","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","getCountrySelectOptions","_this$props6","autoComplete","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","onCountryFocus","onCountryBlur","setInputRef","PureComponent","PhoneNumberInput","oneOf","oneOfType","any","createPhoneInput","PhoneInputDefault"],"mappings":"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","file":"static/js/34.6c8b6062.chunk.js","sourcesContent":["// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // https://stackoverflow.com/a/46971044/970769\n\n\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport { ParseError as default };\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;","// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\nvar CALLING_CODE_REG_EXP = /^\\d+$/;\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata = /*#__PURE__*/function () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      // Supports just passing `callingCode` as the first argument.\n      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\n        callingCode = countryCode;\n        countryCode = null;\n      }\n\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      return this.selectNumberingPlan(callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan = /*#__PURE__*/function () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    } // Is always present.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    } // Is only present when a country supports multiple IDD prefixes.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    } // Is always present.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format = /*#__PURE__*/function () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\n      // when `national_prefix_formatting_rule` is not present.\n      // So, `true` or `false` are returned explicitly here, so that\n      // `0` number isn't returned.\n      ? true : false;\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type = /*#__PURE__*/function () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  var version = metadata.version;\n\n  if (typeof version === 'number') {\n    this.v1 = version === 1;\n    this.v2 = version === 2;\n    this.v3 = version === 3;\n    this.v4 = version === 4;\n  } else {\n    if (!version) {\n      this.v1 = true;\n    } else if (compare(version, V3) === -1) {\n      this.v2 = true;\n    } else if (compare(version, V4) === -1) {\n      this.v3 = true;\n    } else {\n      this.v4 = true;\n    }\n  }\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }","import { VALID_DIGITS } from '../../constants'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext=';\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\n\nvar getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {\n  return \"([\".concat(VALID_DIGITS, \"]{1,\").concat(maxLength, \"})\");\n};\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\n\n\nexport default function createExtensionPattern(purpose) {\n  // We cap the maximum length of an extension based on the ambiguity of the way\n  // the extension is prefixed. As per ITU, the officially allowed length for\n  // extensions is actually 40, but we don't support this since we haven't seen real\n  // examples and this introduces many false interpretations as the extension labels\n  // are not standardized.\n\n  /** @type {string} */\n  var extLimitAfterExplicitLabel = '20';\n  /** @type {string} */\n\n  var extLimitAfterLikelyLabel = '15';\n  /** @type {string} */\n\n  var extLimitAfterAmbiguousChar = '9';\n  /** @type {string} */\n\n  var extLimitWhenNotSure = '6';\n  /** @type {string} */\n\n  var possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\xA0\\\\t,]*\"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\n\n  /** @type {string} */\n\n  var possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\";\n  /** @type {string} */\n\n  var optionalExtnSuffix = \"#?\"; // Here the extension is called out in more explicit way, i.e mentioning it obvious\n  // patterns like \"ext.\".\n\n  /** @type {string} */\n\n  var explicitExtLabels = \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\"; // One-character symbols that can be used to indicate an extension, and less\n  // commonly used or more ambiguous extension labels.\n\n  /** @type {string} */\n\n  var ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\"; // When extension is not separated clearly.\n\n  /** @type {string} */\n\n  var ambiguousSeparator = \"[- ]+\"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\n  // comma as extension label may have it.\n\n  /** @type {string} */\n\n  var possibleSeparatorsNumberExtLabelNoComma = \"[ \\xA0\\\\t]*\"; // \",,\" is commonly used for auto dialling the extension when connected. First\n  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\n  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a\n  // button with the extension number following.\n\n  /** @type {string} */\n\n  var autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\n  /** @type {string} */\n\n  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\n  /** @type {string} */\n\n  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\n  /** @type {string} */\n\n  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;\n  /** @type {string} */\n\n  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + \"(?:,)+\" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added\n  // using \";ext=\". The second more generic where extension is mentioned with explicit\n  // labels like \"ext:\". In both the above cases we allow more numbers in extension than\n  // any other extension labels. The third one captures when single character extension\n  // labels or less commonly used labels are used. In such cases we capture fewer\n  // extension digits in order to reduce the chance of falsely interpreting two\n  // numbers beside each other as a number + extension. The fourth one covers the\n  // special case of American numbers where the extension is written with a hash\n  // at the end, such as \"- 503#\". The fifth one is exclusively for extension\n  // autodialling formats which are used when dialling and in this case we accept longer\n  // extensions. The last one is more liberal on the number of commas that acts as\n  // extension labels, so we have a strict cap on the number of digits in such extensions.\n\n  return rfcExtn + \"|\" + explicitExtn + \"|\" + ambiguousExtn + \"|\" + americanStyleExtnWithSuffix + \"|\" + autoDiallingExtn + \"|\" + onlyCommasExtn;\n}","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from '../constants';\nimport createExtensionPattern from './extension/createExtensionPattern'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nexport var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`\n// and is only used to determine whether the phone number being input\n// is too short for it to even consider it a \"valid\" number.\n// This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nvar VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){1,2}' + '$', 'i');\nexport var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + createExtensionPattern() + ')?'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n} // This is just a way to differentiate between a really invalid phone\n// number like \"abcde\" and a valid phone number that a user has just\n// started inputting, like \"+1\" or \"1\": both these cases would be\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\n// library can provide a more detailed error message — whether it's\n// really \"not a number\", or is it just a start of a valid phone number.\n\nexport function isViablePhoneNumberStart(number) {\n  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);\n}","import createExtensionPattern from './createExtensionPattern'; // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport default function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var numberWithoutExtension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i]) {\n      return {\n        number: numberWithoutExtension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}","import { parseDigit } from './helpers/parseDigits';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (prevParsedCharacters) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}","import mergeArrays from './mergeArrays';\nexport default function checkNumberLength(nationalNumber, metadata) {\n  return checkNumberLengthForType(nationalNumber, undefined, metadata);\n} // Checks whether a number is possible for the country based on its length.\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths) {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // } else {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n    return 'INVALID_LENGTH';\n  }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}","/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport default function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b) {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}","import Metadata from './metadata';\nimport checkNumberLength from './helpers/checkNumberLength';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.selectNumberingPlan(input.countryCallingCode);\n    }\n  }\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, metadata) {\n  //, isInternational) {\n  switch (checkNumberLength(nationalNumber, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // This library ignores \"local-only\" phone numbers (for simplicity).\n    // See the readme for more info on what are \"local-only\" phone numbers.\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}","function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport default function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}","import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\n      return type;\n    }\n  }\n}\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n}","import { VALID_PUNCTUATION } from '../constants'; // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\n  return formattedNumber.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}","import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle'; // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly. Therefore, we use `\\d`, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport default function formatNationalNumberUsingFormat(number, format, _ref) {\n  var useInternationalFormat = _ref.useInternationalFormat,\n      withNationalPrefix = _ref.withNationalPrefix,\n      carrierCode = _ref.carrierCode,\n      metadata = _ref.metadata;\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,\n  // because that one is only used when formatting phone numbers\n  // for dialing from a mobile phone, and this is not a dialing library.\n  // carrierCode && format.domesticCarrierCodeFormattingRule()\n  // \t// First, replace the $CC in the formatting rule with the desired carrier code.\n  // \t// Then, replace the $FG in the formatting rule with the first group\n  // \t// and the carrier code combined in the appropriate way.\n  // \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\n  // \t: (\n  // \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\n  // \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\n  // \t\t\t: format.format()\n  // \t)\n  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}","import Metadata from '../metadata';\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport default function getIddPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (countryMetadata.defaultIDDPrefix()) {\n    return countryMetadata.defaultIDDPrefix();\n  }\n\n  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n}","function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\nimport matchesEntirely from './helpers/matchesEntirely';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat';\nimport Metadata, { getCountryCallingCode } from './metadata';\nimport getIddPrefix from './helpers/getIddPrefix';\nimport { formatRFC3966 } from './helpers/RFC3966';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.selectNumberingPlan(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n    // For reference, here's Google's IDD formatter:\n    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\n    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.\n    // Who would even need to format phone numbers in IDD format anyway?\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);\n      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n}\n\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, {\n    useInternationalFormat: formatAs === 'INTERNATIONAL',\n    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,\n    carrierCode: carrierCode,\n    metadata: metadata\n  });\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref; // Validate leading digits\n\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {\n  var fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata); // When calling within the same country calling code.\n\n  if (fromCountryCallingCode === countryCallingCode) {\n    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n\n    if (countryCallingCode === '1') {\n      return countryCallingCode + ' ' + formattedNumber;\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formattedNumber;\n  }\n\n  var iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata);\n\n  if (iddPrefix) {\n    return \"\".concat(iddPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));\n  }\n}","function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './helpers/getNumberType';\nimport formatNumber from './format_';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};","import Metadata from './metadata';\nimport matchesEntirely from './helpers/matchesEntirely';\nimport getNumberType from './helpers/getNumberType';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}","import Metadata from '../metadata';\nimport { VALID_DIGITS } from '../constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,\n  // then those digits are a country calling code.\n  // Since no country code starts with a `0`,\n  // the code below validates that the next digit (if present) is not `0`.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}","/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`.\r\n */\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\n  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n      // If a `national_prefix_for_parsing` has any \"capturing groups\"\n      // then it means that the national (significant) number is equal to\n      // those \"capturing groups\" transformed via `national_prefix_transform_rule`,\n      // and nothing could be said about the actual national prefix:\n      // what is it and was it even there.\n      // If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\n      // then everything it matches is a national prefix.\n      // To determine whether `national_prefix_for_parsing` matched any\n      // \"capturing groups\", the value of the result of calling `.exec()`\n      // is looked at, and if it has non-undefined values where there're\n      // \"capturing groups\" in the regular expression, then it means\n      // that \"capturing groups\" have been matched.\n      // It's not possible to tell whether there'll be any \"capturing gropus\"\n      // before the matching process, because a `national_prefix_for_parsing`\n      // could exhibit both behaviors.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];\n\n      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,\n        // then carrier code is the second one.\n\n        if (capturedGroupsCount > 1) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If there're no \"capturing groups\",\n      // or if there're \"capturing groups\" but no\n      // `national_prefix_transform_rule`,\n      // then just strip the national prefix from the number,\n      // and possibly a carrier code.\n      // Seems like there could be more.\n      else {\n        // `prefixBeforeNationalNumber` is the whole substring matched by\n        // the `national_prefix_for_parsing` regular expression.\n        // There seem to be no guarantees that it's just a national prefix.\n        // For example, if there's a carrier code, it's gonna be a\n        // part of `prefixBeforeNationalNumber` too.\n        var prefixBeforeNationalNumber = prefixMatch[0];\n        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,\n        // then carrier code is the first one.\n\n        if (hasCapturedGroups) {\n          carrierCode = prefixMatch[1];\n        }\n      } // Tries to guess whether a national prefix was present in the input.\n      // This is not something copy-pasted from Google's library:\n      // they don't seem to have an equivalent for that.\n      // So this isn't an \"officially approved\" way of doing something like that.\n      // But since there seems no other existing method, this library uses it.\n\n\n      var nationalPrefix;\n\n      if (hasCapturedGroups) {\n        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);\n        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.\n        // `prefixMatch[0]` is `01115`, and `$1` is `11`,\n        // and the rest of the phone number is `23456789`.\n        // The national number is transformed via `9$1` to `91123456789`.\n        // National prefix `0` is detected being present at the start.\n        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\n\n        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\n          nationalPrefix = metadata.numberingPlan.nationalPrefix();\n        }\n      } else {\n        nationalPrefix = prefixMatch[0];\n      }\n\n      return {\n        nationalNumber: nationalNumber,\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode\n      };\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}","import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber';\nimport matchesEntirely from './matchesEntirely';\nimport checkNumberLength from './checkNumberLength';\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport default function extractNationalNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(number, metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode;\n\n  if (!shouldExtractNationalPrefix(number, nationalNumber, metadata)) {\n    // Don't strip the national prefix.\n    return {\n      nationalNumber: number\n    };\n  } // If a national prefix has been extracted, check to see\n  // if the resultant number isn't too short.\n  // Same code in Google's `libphonenumber`:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3291-L3302\n  // For some reason, they do this check right after the `national_number_pattern` check\n  // this library does in `shouldExtractNationalPrefix()` function.\n  // Why is there a second \"resultant\" number validity check?\n  // They don't provide an explanation.\n  // This library just copies the behavior.\n\n\n  if (number.length !== nationalNumber.length + (carrierCode ? carrierCode.length : 0)) {\n    // If not using legacy generated metadata (before version `1.0.18`)\n    // then it has \"possible lengths\", so use those to validate the number length.\n    if (metadata.possibleLengths()) {\n      // \"We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\"\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      switch (checkNumberLength(nationalNumber, metadata)) {\n        case 'TOO_SHORT':\n        case 'INVALID_LENGTH':\n          // case 'IS_POSSIBLE_LOCAL_ONLY':\n          // Don't strip the national prefix.\n          return {\n            nationalNumber: number\n          };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // In some countries, the same digit could be a national prefix\n// or a leading digit of a valid phone number.\n// For example, in Russia, national prefix is `8`,\n// and also `800 555 35 35` is a valid number\n// in which `8` is not a national prefix, but the first digit\n// of a national (significant) number.\n// Same's with Belarus:\n// `82004910060` is a valid national (significant) number,\n// but `2004910060` is not.\n// To support such cases (to prevent the code from always stripping\n// national prefix), a condition is imposed: a national prefix\n// is not extracted when the original number is \"viable\" and the\n// resultant number is not, a \"viable\" national number being the one\n// that matches `national_number_pattern`.\n\nfunction shouldExtractNationalPrefix(number, nationalSignificantNumber, metadata) {\n  // The equivalent in Google's code is:\n  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\n  if (matchesEntirely(number, metadata.nationalNumberPattern()) && !matchesEntirely(nationalSignificantNumber, metadata.nationalNumberPattern())) {\n    return false;\n  } // Just \"possible\" number check would be more relaxed, so it's not used.\n  // if (isPossibleNumber(number, metadata) &&\n  // \t!isPossibleNumber(numberWithNationalPrefixExtracted, metadata)) {\n  // \treturn false\n  // }\n\n\n  return true;\n}","import Metadata from '../metadata';\nimport matchesEntirely from './matchesEntirely';\nimport extractNationalNumber from './extractNationalNumber';\nimport checkNumberLength from './checkNumberLength';\nimport getCountryCallingCode from '../getCountryCallingCode';\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _extractNationalNumbe = extractNationalNumber(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;\n\n    var _extractNationalNumbe2 = extractNationalNumber(number, metadata),\n        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLength(nationalNumber, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}","import stripIddPrefix from './stripIddPrefix';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport Metadata from '../metadata';\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants';\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport default function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin.countryCallingCode,\n            shorterNumber = _extractCountryCallin.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(_countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}","import Metadata from '../metadata';\nimport getNumberType from './getNumberType';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nexport default function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata.metadata);\n}\n\nfunction selectCountryFromList(possibleCountries, nationalPhoneNumber, metadata) {\n  // Re-create `metadata` because it will be selecting a `country`.\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest and fastest one.\n    // Leading digits patterns are only defined for about 20% of all countries.\n    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\n    // Matching \"leading digits\" is a sufficient but not necessary condition.\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n      phone: nationalPhoneNumber,\n      country: country\n    }, undefined, metadata.metadata)) {\n      return country;\n    }\n  }\n}","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN } from './constants';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber';\nimport extractExtension from './helpers/extension/extractExtension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport { isPossibleNumber } from './isPossibleNumber_';\nimport { parseRFC3966 } from './helpers/RFC3966';\nimport PhoneNumber from './PhoneNumber';\nimport matchesEntirely from './helpers/matchesEntirely';\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport extractNationalNumber from './helpers/extractNationalNumber';\nimport stripIddPrefix from './helpers/stripIddPrefix';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2, options.extract),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext,\n      error = _parseInput.error; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      if (error === 'TOO_SHORT') {\n        throw new ParseError('TOO_SHORT');\n      }\n\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  } // isInternational: countryCallingCode !== undefined\n\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  }\n\n  if (extract === false) {\n    return text;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2, extract) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, extract, v2); // If the phone number is not viable, then abort.\n\n  if (!number) {\n    return {};\n  }\n\n  if (!isViablePhoneNumber(number)) {\n    if (isViablePhoneNumberStart(number)) {\n      return {\n        error: 'TOO_SHORT'\n      };\n    }\n\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.selectNumberingPlan(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n    if (defaultCountry) {\n      country = defaultCountry;\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          country = '001';\n        }\n      }\n    }\n\n    countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n  } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _extractNationalNumbe = extractNationalNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _extractNationalNumbe.nationalNumber,\n      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = getCountryByCallingCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}","function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parseNumber from './parse_';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread({}, options, {\n    v2: true\n  }), metadata);\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n    if (arg_3) {\n      options = arg_2;\n      metadata = arg_3;\n    } else {\n      metadata = arg_2;\n    }\n  } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};","function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}","import Metadata from './metadata';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}","import PropTypes from 'prop-types';\nexport var metadata = PropTypes.shape({\n  country_calling_codes: PropTypes.object.isRequired,\n  countries: PropTypes.object.isRequired\n});\nexport var labels = PropTypes.objectOf(PropTypes.string);","// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}","import { count_occurences } from './helpers';\nexport default function closeBraces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n}","import template_formatter from './templateFormatter'; // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nexport default function format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = template_formatter(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}","import { count_occurences } from './helpers';\nimport close_braces from './closeBraces'; // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\nexport default function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var character = _ref;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = close_braces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n}","export function isReadOnly(element) {\n  return element.hasAttribute('readonly');\n} // Gets <input/> selection bounds\n\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;","import edit from './edit';\nimport parse from './parse';\nimport format from './format';\nimport { isReadOnly, getOperation, getSelection, getCaretPosition, setCaretPosition } from './dom'; // Deprecated.\n// I don't know why this function exists.\n\nexport function onCut(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  } // The actual cut hasn't happened just yet hence the timeout.\n\n\n  setTimeout(function () {\n    return formatInputText(input, _parse, _format, undefined, on_change);\n  }, 0);\n} // Deprecated.\n// I don't know why this function exists.\n\nexport function onPaste(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    eraseSelection(input, selection);\n  }\n\n  formatInputText(input, _parse, _format, undefined, on_change);\n}\nexport function onChange(event, input, _parse, _format, on_change) {\n  formatInputText(input, _parse, _format, undefined, on_change);\n} // \"Delete\" and \"Backspace\" keys are special\n// in a way that they're not handled by the regular `onChange()` handler\n// and instead are intercepted and re-applied manually.\n// The reason is that normally hitting \"Backspace\" or \"Delete\"\n// results in erasing a character, but that character might be any character,\n// while it would be a better \"user experience\" if it erased not just any character\n// but the closest \"meaningful\" character.\n// For example, if a template is `(xxx) xxx-xxxx`,\n// and the `<input/>` value is `(111) 222-3333`,\n// then, if a user begins erasing the `3333` part via \"Backspace\"\n// and reaches the \"-\" character, then it would just erase the \"-\" character.\n// Nothing wrong with that, but it would be a better \"user experience\"\n// if hitting \"Backspace\" at that position would erase the closest \"meaningful\"\n// character, which would be the rightmost `2`.\n// So, what this `onKeyDown()` handler does is it intercepts\n// \"Backspace\" and \"Delete\" keys and re-applies those operations manually\n// following the logic described above.\n\nexport function onKeyDown(event, input, _parse, _format, on_change) {\n  if (isReadOnly(input)) {\n    return;\n  }\n\n  var operation = getOperation(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If a selection is made, just erase the selected text.\n\n      if (selection) {\n        eraseSelection(input, selection);\n        return formatInputText(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually.\n\n\n      return formatInputText(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled normally as part of the `onChange` handler.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction eraseSelection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction formatInputText(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get the `value` and `caret` position.\n  var _parse2 = parse(input.value, getCaretPosition(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (\"Backspace\", \"Delete\")\n  // then apply that operation and get the new `value` and `caret` position.\n\n\n  if (operation) {\n    var newValueAndCaret = edit(value, caret, operation);\n    value = newValueAndCaret.value;\n    caret = newValueAndCaret.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside a subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // If the `<input/>` textual value did change,\n  // then the parsed `value` may have changed too.\n\n  on_change(value);\n}","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} // This is just `./ReactInput.js` rewritten in Hooks.\n\n\nimport React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { onChange as onInputChange, onKeyDown as onInputKeyDown } from '../inputControl'; // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onKeyDown\"]);\n\n  var internalRef = useRef();\n  var setRef = useCallback(function (instance) {\n    internalRef.current = instance;\n\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(instance);\n      } else {\n        ref.current = instance;\n      }\n    }\n  }, [ref]);\n\n  var _onChange = useCallback(function (event) {\n    return onInputChange(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange]);\n\n  var _onKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return onInputKeyDown(event, internalRef.current, parse, format, onChange);\n  }, [internalRef, parse, format, onChange, onKeyDown]);\n\n  return React.createElement(InputComponent, _extends({}, rest, {\n    ref: setRef,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange\n  }));\n}\n\nInput = React.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: PropTypes.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: PropTypes.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: PropTypes.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: PropTypes.string.isRequired,\n  // Is parsed from <input/> text.\n  value: PropTypes.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: PropTypes.func.isRequired,\n  // Passthrough\n  onKeyDown: PropTypes.func,\n  onCut: PropTypes.func,\n  onPaste: PropTypes.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexport default Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar AsYouTypeState = /*#__PURE__*/function () {\n  function AsYouTypeState(_ref) {\n    var _this = this;\n\n    var onCountryChange = _ref.onCountryChange,\n        onCallingCodeChange = _ref.onCallingCodeChange;\n\n    _classCallCheck(this, AsYouTypeState);\n\n    _defineProperty(this, \"update\", function (properties) {\n      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        _this[key] = properties[key];\n      }\n    });\n\n    this.onCountryChange = onCountryChange;\n    this.onCallingCodeChange = onCallingCodeChange;\n  }\n\n  _createClass(AsYouTypeState, [{\n    key: \"reset\",\n    value: function reset(defaultCountry, defaultCallingCode) {\n      this.international = false;\n      this.IDDPrefix = undefined;\n      this.missingPlus = undefined;\n      this.callingCode = undefined;\n      this.digits = '';\n      this.resetNationalSignificantNumber();\n      this.initCountryAndCallingCode(defaultCountry, defaultCallingCode);\n    }\n  }, {\n    key: \"resetNationalSignificantNumber\",\n    value: function resetNationalSignificantNumber() {\n      this.nationalSignificantNumber = this.getNationalDigits();\n      this.nationalSignificantNumberMatchesInput = true;\n      this.nationalPrefix = undefined;\n      this.carrierCode = undefined;\n      this.complexPrefixBeforeNationalSignificantNumber = undefined;\n    }\n  }, {\n    key: \"initCountryAndCallingCode\",\n    value: function initCountryAndCallingCode(country, callingCode) {\n      this.setCountry(country);\n      this.setCallingCode(callingCode);\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country) {\n      this.country = country;\n      this.onCountryChange(country);\n    }\n  }, {\n    key: \"setCallingCode\",\n    value: function setCallingCode(callingCode) {\n      this.callingCode = callingCode;\n      return this.onCallingCodeChange(this.country, callingCode);\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.initCountryAndCallingCode();\n    }\n  }, {\n    key: \"appendDigits\",\n    value: function appendDigits(nextDigits) {\n      this.digits += nextDigits;\n    }\n  }, {\n    key: \"appendNationalSignificantNumberDigits\",\n    value: function appendNationalSignificantNumberDigits(nextDigits) {\n      this.nationalSignificantNumber += nextDigits;\n    }\n    /**\r\n     * Returns the part of `this.digits` that corresponds to the national number.\r\n     * Basically, all digits that have been input by the user, except for the\r\n     * international prefix and the country calling code part\r\n     * (if the number is an international one).\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getNationalDigits\",\n    value: function getNationalDigits() {\n      if (this.international) {\n        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));\n      }\n\n      return this.digits;\n    }\n  }, {\n    key: \"getDigitsWithoutInternationalPrefix\",\n    value: function getDigitsWithoutInternationalPrefix() {\n      if (this.international) {\n        if (this.IDDPrefix) {\n          return this.digits.slice(this.IDDPrefix.length);\n        }\n      }\n\n      return this.digits;\n    }\n  }]);\n\n  return AsYouTypeState;\n}();\n\nexport { AsYouTypeState as default };","// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n}\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i2 = 0, _dangling_braces = dangling_braces; _i2 < _dangling_braces.length; _i2++) {\n    var index = _dangling_braces[_i2];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function populateTemplateWithDigits(template, position, digits) {\n  // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for `digits` it is safe.\n  // for (const digit of digits)\n  for (var _iterator2 = digits.split(''), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref2;\n\n    if (_isArray2) {\n      if (_i3 >= _iterator2.length) break;\n      _ref2 = _iterator2[_i3++];\n    } else {\n      _i3 = _iterator2.next();\n      if (_i3.done) break;\n      _ref2 = _i3.value;\n    }\n\n    var digit = _ref2; // If there is room for more digits in current `template`,\n    // then set the next digit in the `template`,\n    // and return the formatted digits so far.\n    // If more digits are entered than the current format could handle.\n\n    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n      return;\n    }\n\n    position = template.search(DIGIT_PLACEHOLDER_MATCHER);\n    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n  }\n\n  return [template, position];\n}","import checkNumberLength from './helpers/checkNumberLength';\nimport parseDigits from './helpers/parseDigits';\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat';\nexport default function formatCompleteNumber(state, format, _ref) {\n  var metadata = _ref.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;\n  var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n  if (matcher.test(state.nationalSignificantNumber)) {\n    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\n      metadata: metadata,\n      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix\n    });\n  }\n}\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\n  return checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';\n}\n\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {\n  var metadata = _ref2.metadata,\n      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix; // `format` has already been checked for `nationalPrefix` requirement.\n\n  var nationalSignificantNumber = state.nationalSignificantNumber,\n      international = state.international,\n      nationalPrefix = state.nationalPrefix,\n      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.\n  // If the resulting formatted number is a valid formatted number, then return it.\n  //\n  // Google's AsYouType formatter is different in a way that it doesn't try\n  // to format using the \"national prefix formatting rule\", and instead it\n  // simply prepends a national prefix followed by a \" \" character.\n  // This code does that too, but as a fallback.\n  // The reason is that \"national prefix formatting rule\" may use parentheses,\n  // which wouldn't be included has it used the simpler Google's way.\n  //\n\n  if (shouldTryNationalPrefixFormattingRule(format)) {\n    var formattedNumber = formatNationalNumber(state, format, {\n      useNationalPrefixFormattingRule: true,\n      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n      metadata: metadata\n    });\n\n    if (formattedNumber) {\n      return formattedNumber;\n    }\n  } // Format the number without using `national_prefix_formatting_rule`.\n\n\n  return formatNationalNumber(state, format, {\n    useNationalPrefixFormattingRule: false,\n    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,\n    metadata: metadata\n  });\n}\n\nfunction formatNationalNumber(state, format, _ref3) {\n  var metadata = _ref3.metadata,\n      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,\n      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;\n  var formattedNationalNumber = formatNationalNumberUsingFormat(state.nationalSignificantNumber, format, {\n    carrierCode: state.carrierCode,\n    useInternationalFormat: state.international,\n    withNationalPrefix: useNationalPrefixFormattingRule,\n    metadata: metadata\n  });\n\n  if (!useNationalPrefixFormattingRule) {\n    if (state.nationalPrefix) {\n      // If a national prefix was extracted, then just prepend it,\n      // followed by a \" \" character.\n      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n    } else if (state.complexPrefixBeforeNationalSignificantNumber) {\n      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;\n    }\n  }\n\n  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\n    return formattedNationalNumber;\n  }\n} // Check that the formatted phone number contains exactly\n// the same digits that have been input by the user.\n// For example, when \"0111523456789\" is input for `AR` country,\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\n// which means that the national part of `this.digits` isn't simply equal to\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\n//\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\n// being formatted via `metadata[country].national_prefix_transform_rule`.\n// For example, for `VI` country, it prepends `340` to the national number,\n// and if this check hasn't been implemented, then there would be a bug\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\n//\n// So, all these \"gotchas\" are filtered out.\n//\n// In the original Google's code, the comments say:\n// \"Check that we didn't remove nor add any extra digits when we matched\n// this formatting pattern. This usually happens after we entered the last\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n// formatted but AYTF should retain all the number entered and not change\n// in order to match a format (of same leading digits and length) display\n// in that way.\"\n// \"If it's the same (i.e entered number and format is same), then it's\n// safe to return this in formatted number as nothing is lost / added.\"\n// Otherwise, don't use this format.\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n//\n\n\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\n  return parseDigits(formattedNationalNumber) === state.getNationalDigits();\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar PatternMatcher = /*#__PURE__*/function () {\n  function PatternMatcher(pattern) {\n    _classCallCheck(this, PatternMatcher);\n\n    this.matchTree = new PatternParser().parse(pattern);\n  }\n\n  _createClass(PatternMatcher, [{\n    key: \"match\",\n    value: function match(string) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          allowOverflow = _ref.allowOverflow;\n\n      if (!string) {\n        throw new Error('String is required');\n      }\n\n      var result = _match(string.split(''), this.matchTree, true);\n\n      if (result && result.match) {\n        delete result.matchedChars;\n      }\n\n      if (result && result.overflow) {\n        if (!allowOverflow) {\n          return;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return PatternMatcher;\n}();\n\nexport { PatternMatcher as default };\n\nfunction _match(characters, tree, last) {\n  if (typeof tree === 'string') {\n    if (last) {\n      // `tree` is always a single character.\n      if (characters.length > tree.length) {\n        return {\n          overflow: true\n        };\n      }\n    }\n\n    var characterString = characters.join('');\n\n    if (tree.indexOf(characterString) === 0) {\n      // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore else */\n      if (characters.length === tree.length) {\n        return {\n          match: true,\n          matchedChars: characters\n        };\n      } // `tree` is always a single character.\n      // If `tree.indexOf(characterString) === 0`\n      // then `characters.length === tree.length`.\n\n      /* istanbul ignore next */\n\n\n      return {\n        partialMatch: true // matchedChars: characters\n\n      };\n    }\n\n    if (characterString.indexOf(tree) === 0) {\n      return {\n        match: true,\n        matchedChars: characters.slice(0, tree.length)\n      };\n    }\n\n    return;\n  }\n\n  if (Array.isArray(tree)) {\n    var restCharacters = characters.slice();\n    var i = 0;\n\n    while (i < tree.length) {\n      var subtree = tree[i];\n\n      var result = _match(restCharacters, subtree, last && i === tree.length - 1);\n\n      if (!result) {\n        return;\n      } else if (result.overflow) {\n        return result;\n      } else if (result.match) {\n        // Continue with the next subtree with the rest of the characters.\n        restCharacters = restCharacters.slice(result.matchedChars.length);\n\n        if (restCharacters.length === 0) {\n          if (i === tree.length - 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          } else {\n            return {\n              partialMatch: true // matchedChars: characters\n\n            };\n          }\n        }\n      } else {\n        /* istanbul ignore else */\n        if (result.partialMatch) {\n          return {\n            partialMatch: true // matchedChars: characters\n\n          };\n        } else {\n          throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(result, null, 2)));\n        }\n      }\n\n      i++;\n    } // If `last` then overflow has already been checked\n    // by the last element of the `tree` array.\n\n    /* istanbul ignore if */\n\n\n    if (last) {\n      return {\n        overflow: true\n      };\n    }\n\n    return {\n      match: true,\n      matchedChars: characters.slice(0, characters.length - restCharacters.length)\n    };\n  }\n\n  switch (tree.op) {\n    case '|':\n      var partialMatch;\n\n      for (var _iterator = tree.args, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref2 = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref2 = _i.value;\n        }\n\n        var branch = _ref2;\n\n        var _result = _match(characters, branch, last);\n\n        if (_result) {\n          if (_result.overflow) {\n            return _result;\n          } else if (_result.match) {\n            return {\n              match: true,\n              matchedChars: _result.matchedChars\n            };\n          } else {\n            /* istanbul ignore else */\n            if (_result.partialMatch) {\n              partialMatch = true;\n            } else {\n              throw new Error(\"Unsupported match result:\\n\".concat(JSON.stringify(_result, null, 2)));\n            }\n          }\n        }\n      }\n\n      if (partialMatch) {\n        return {\n          partialMatch: true // matchedChars: ...\n\n        };\n      } // Not even a partial match.\n\n\n      return;\n\n    case '[]':\n      for (var _iterator2 = tree.args, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref3 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref3 = _i2.value;\n        }\n\n        var _char = _ref3;\n\n        if (characters[0] === _char) {\n          if (characters.length === 1) {\n            return {\n              match: true,\n              matchedChars: characters\n            };\n          }\n\n          if (last) {\n            return {\n              overflow: true\n            };\n          }\n\n          return {\n            match: true,\n            matchedChars: [_char]\n          };\n        }\n      } // No character matches.\n\n\n      return;\n\n    /* istanbul ignore next */\n\n    default:\n      throw new Error(\"Unsupported instruction tree: \".concat(tree));\n  }\n}\n\nvar OPERATOR = new RegExp( // any of:\n'(' + // or operator\n'\\\\|' + // or\n'|' + // or group start\n'\\\\(\\\\?\\\\:' + // or\n'|' + // or group end\n'\\\\)' + // or\n'|' + // one-of set start\n'\\\\[' + // or\n'|' + // one-of set end\n'\\\\]' + ')');\nvar ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/;\n\nvar PatternParser = /*#__PURE__*/function () {\n  function PatternParser() {\n    _classCallCheck(this, PatternParser);\n  }\n\n  _createClass(PatternParser, [{\n    key: \"parse\",\n    value: function parse(pattern) {\n      this.context = [{\n        or: true,\n        instructions: []\n      }];\n      this.parsePattern(pattern);\n\n      if (this.context.length !== 1) {\n        throw new Error('Non-finalized contexts left when pattern parse ended');\n      }\n\n      var _this$context$ = this.context[0],\n          branches = _this$context$.branches,\n          instructions = _this$context$.instructions;\n\n      if (branches) {\n        return [{\n          op: '|',\n          args: branches.concat([instructions])\n        }];\n      }\n      /* istanbul ignore if */\n\n\n      if (instructions.length === 0) {\n        throw new Error('Pattern is required');\n      }\n\n      return instructions;\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(context) {\n      this.context.push(context);\n    }\n  }, {\n    key: \"endContext\",\n    value: function endContext() {\n      this.context.pop();\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.context[this.context.length - 1];\n    }\n  }, {\n    key: \"parsePattern\",\n    value: function parsePattern(pattern) {\n      if (!pattern) {\n        throw new Error('Pattern is required');\n      }\n\n      var match = pattern.match(OPERATOR);\n\n      if (!match) {\n        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\n          throw new Error(\"Illegal characters found in a pattern: \".concat(pattern));\n        }\n\n        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));\n        return;\n      }\n\n      var operator = match[1];\n      var before = pattern.slice(0, match.index);\n      var rightPart = pattern.slice(match.index + operator.length);\n\n      switch (operator) {\n        case '(?:':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            or: true,\n            instructions: [],\n            branches: []\n          });\n          break;\n\n        case ')':\n          if (!this.getContext().or) {\n            throw new Error('\")\" operator must be preceded by \"(?:\" operator');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          if (this.getContext().instructions.length === 0) {\n            throw new Error('No instructions found after \"|\" operator in an \"or\" group');\n          }\n\n          var _this$getContext = this.getContext(),\n              branches = _this$getContext.branches;\n\n          branches.push(this.getContext().instructions);\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '|',\n            args: branches\n          });\n          break;\n\n        case '|':\n          if (!this.getContext().or) {\n            throw new Error('\"|\" operator can only be used inside \"or\" groups');\n          }\n\n          if (before) {\n            this.parsePattern(before);\n          } // The top-level is an implicit \"or\" group, if required.\n\n\n          if (!this.getContext().branches) {\n            // `branches` are not defined only for the root implicit \"or\" operator.\n\n            /* istanbul ignore else */\n            if (this.context.length === 1) {\n              this.getContext().branches = [];\n            } else {\n              throw new Error('\"branches\" not found in an \"or\" group context');\n            }\n          }\n\n          this.getContext().branches.push(this.getContext().instructions);\n          this.getContext().instructions = [];\n          break;\n\n        case '[':\n          if (before) {\n            this.parsePattern(before);\n          }\n\n          this.startContext({\n            oneOfSet: true\n          });\n          break;\n\n        case ']':\n          if (!this.getContext().oneOfSet) {\n            throw new Error('\"]\" operator must be preceded by \"[\" operator');\n          }\n\n          this.endContext();\n          this.getContext().instructions.push({\n            op: '[]',\n            args: parseOneOfSet(before)\n          });\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(\"Unknown operator: \".concat(operator));\n      }\n\n      if (rightPart) {\n        this.parsePattern(rightPart);\n      }\n    }\n  }]);\n\n  return PatternParser;\n}();\n\nfunction parseOneOfSet(pattern) {\n  var values = [];\n  var i = 0;\n\n  while (i < pattern.length) {\n    if (pattern[i] === '-') {\n      if (i === 0 || i === pattern.length - 1) {\n        throw new Error(\"Couldn't parse a one-of set pattern: \".concat(pattern));\n      }\n\n      var prevValue = pattern[i - 1].charCodeAt(0) + 1;\n      var nextValue = pattern[i + 1].charCodeAt(0) - 1;\n      var value = prevValue;\n\n      while (value <= nextValue) {\n        values.push(String.fromCharCode(value));\n        value++;\n      }\n    } else {\n      values.push(pattern[i]);\n    }\n\n    i++;\n  }\n\n  return values;\n}","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { DIGIT_PLACEHOLDER, countOccurences, repeat, cutAndStripNonPairedParens, closeNonPairedParens, stripNonPairedParens, populateTemplateWithDigits } from './AsYouTypeFormatter.util';\nimport formatCompleteNumber, { canFormatCompleteNumber } from './AsYouTypeFormatter.complete';\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher';\nimport parseDigits from './helpers/parseDigits';\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util';\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat';\nimport { VALID_PUNCTUATION } from './constants';\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A regular expression that is used to determine if a `format` is\n// suitable to be used in the \"as you type formatter\".\n// A `format` is suitable when the resulting formatted number has\n// the same digits as the user has entered.\n//\n// In the simplest case, that would mean that the format\n// doesn't add any additional digits when formatting a number.\n// Google says that it also shouldn't add \"star\" (`*`) characters,\n// like it does in some Israeli formats.\n// Such basic format would only contain \"valid punctuation\"\n// and \"captured group\" identifiers ($1, $2, etc).\n//\n// An example of a format that adds additional digits:\n//\n// Country: `AR` (Argentina).\n// Format:\n// {\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n//    \"leading_digits_patterns\": [\"91\"],\n//    \"national_prefix_formatting_rule\": \"0$1\",\n//    \"format\": \"$2 15-$3-$4\",\n//    \"international_format\": \"$1 $2 $3-$4\"\n// }\n//\n// In the format above, the `format` adds `15` to the digits when formatting a number.\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\n// has previously removed `15` from a national number, so re-adding `15` in `format`\n// doesn't actually result in any extra digits added to user's input.\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\n//\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\n// `libphonenumber` code.\n//\n\n\nvar NON_ALTERING_FORMAT_REG_EXP = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar AsYouTypeFormatter = /*#__PURE__*/function () {\n  function AsYouTypeFormatter(_ref) {\n    var _this = this;\n\n    var state = _ref.state,\n        metadata = _ref.metadata;\n\n    _classCallCheck(this, AsYouTypeFormatter);\n\n    _defineProperty(this, \"getSeparatorAfterNationalPrefix\", function (format) {\n      // `US` metadata doesn't have a `national_prefix_formatting_rule`,\n      // so the `if` condition below doesn't apply to `US`,\n      // but in reality there shoudl be a separator\n      // between a national prefix and a national (significant) number.\n      // So `US` national prefix separator is a \"special\" \"hardcoded\" case.\n      if (_this.isNANP) {\n        return ' ';\n      } // If a `format` has a `national_prefix_formatting_rule`\n      // and that rule has a separator after a national prefix,\n      // then it means that there should be a separator\n      // between a national prefix and a national (significant) number.\n\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      } // At this point, there seems to be no clear evidence that\n      // there should be a separator between a national prefix\n      // and a national (significant) number. So don't insert one.\n\n\n      return '';\n    });\n\n    _defineProperty(this, \"shouldTryNationalPrefixFormattingRule\", function (format, _ref2) {\n      var international = _ref2.international,\n          nationalPrefix = _ref2.nationalPrefix;\n\n      if (format.nationalPrefixFormattingRule()) {\n        // In some countries, `national_prefix_formatting_rule` is `($1)`,\n        // so it applies even if the user hasn't input a national prefix.\n        // `format.usesNationalPrefix()` detects such cases.\n        var usesNationalPrefix = format.usesNationalPrefix();\n\n        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {\n          return true;\n        }\n      }\n    });\n\n    this.metadata = metadata;\n    this.resetFormat();\n  }\n\n  _createClass(AsYouTypeFormatter, [{\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.nationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan, state) {\n      this.resetFormat();\n\n      if (numberingPlan) {\n        this.isNANP = numberingPlan.callingCode() === '1';\n        this.matchingFormats = numberingPlan.formats();\n\n        if (state.nationalSignificantNumber) {\n          this.narrowDownMatchingFormats(state);\n        }\n      } else {\n        this.isNANP = undefined;\n        this.matchingFormats = [];\n      }\n    }\n    /**\r\n     * Formats an updated phone number.\r\n     * @param  {string} nextDigits — Additional phone number digits.\r\n     * @param  {object} state — `AsYouType` state.\r\n     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(nextDigits, state) {\n      var _this2 = this; // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNationalNumberWithNextDigits()`,\n      // which formats based on the chosen formatting pattern.\n      //\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`, so this library just follows it.\n      // Google's `libphonenumber` code doesn't explain in detail why does it\n      // attempt to format digits as a complete phone number\n      // instead of just going with a previoulsy (or newly) chosen `format`:\n      //\n      // \"Checks to see if there is an exact pattern match for these digits.\n      //  If so, we should use this instead of any other formatting template\n      //  whose leadingDigitsPattern also matches the input.\"\n      //\n\n\n      if (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\n        for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n          var _ref3;\n\n          if (_isArray) {\n            if (_i >= _iterator.length) break;\n            _ref3 = _iterator[_i++];\n          } else {\n            _i = _iterator.next();\n            if (_i.done) break;\n            _ref3 = _i.value;\n          }\n\n          var format = _ref3;\n          var formattedCompleteNumber = formatCompleteNumber(state, format, {\n            metadata: this.metadata,\n            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {\n              return _this2.shouldTryNationalPrefixFormattingRule(format, {\n                international: state.international,\n                nationalPrefix: state.nationalPrefix\n              });\n            },\n            getSeparatorAfterNationalPrefix: this.getSeparatorAfterNationalPrefix\n          });\n\n          if (formattedCompleteNumber) {\n            this.resetFormat();\n            this.chosenFormat = format;\n            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state);\n            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position\n            // using the old template needs to be reset.\n\n            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER);\n            return formattedCompleteNumber;\n          }\n        }\n      } // Format the digits as a partial (incomplete) phone number\n      // using the previously chosen formatting pattern (or a newly chosen one).\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits, state);\n    } // Formats the next phone number digits.\n\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits, state) {\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat(state);\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If it can format the next (current) digits\n          // using the previously chosen phone number format\n          // then return the updated formatted number.\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then re-format the national phone number part\n          // using the newly selected format.\n          return this.formatNextNationalNumberDigits(state.getNationalDigits());\n        }\n      }\n    }\n  }, {\n    key: \"narrowDownMatchingFormats\",\n    value: function narrowDownMatchingFormats(_ref4) {\n      var _this3 = this;\n\n      var nationalSignificantNumber = _ref4.nationalSignificantNumber,\n          nationalPrefix = _ref4.nationalPrefix,\n          international = _ref4.international;\n      var leadingDigits = nationalSignificantNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        return _this3.formatSuits(format, international, nationalPrefix) && _this3.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"formatSuits\",\n    value: function formatSuits(format, international, nationalPrefix) {\n      // When a prefix before a national (significant) number is\n      // simply a national prefix, then it's parsed as `this.nationalPrefix`.\n      // In more complex cases, a prefix before national (significant) number\n      // could include a national prefix as well as some \"capturing groups\",\n      // and in that case there's no info whether a national prefix has been parsed.\n      // If national prefix is not used when formatting a phone number\n      // using this format, but a national prefix has been entered by the user,\n      // and was extracted, then discard such phone number format.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\n      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&\n      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\n        return false;\n      } // If national prefix is mandatory for this phone number format\n      // and there're no guarantees that a national prefix is present in user input\n      // then discard this phone number format as not suitable.\n      // In Google's \"AsYouType\" formatter code, the equivalent would be this part:\n      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\n\n\n      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"formatMatches\",\n    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\n      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n      // leading digits pattern then it fits.\n\n      if (leadingDigitsPatternsCount === 0) {\n        return true;\n      } // Start narrowing down the list of possible formats based on the leading digits.\n      // (only previously matched formats take part in the narrowing down process)\n      // `leading_digits_patterns` start with 3 digits min\n      // and then go up from there one digit at a time.\n\n\n      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits\n      // to be minimum 3 digits long in order to be eligible\n      // for checking those with a leading digits pattern.\n      //\n      // Since `leading_digits_patterns` start with 3 digits min,\n      // Google's original `libphonenumber` library only starts\n      // excluding any non-matching formats only when the\n      // national number entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives.\n      //\n      // For example, when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Also, `leading_digits_patterns` doesn't always correspond to a single\n      // digits count. For example, `60|8` pattern would already match `8`\n      // but the `60` part would require having at least two leading digits,\n      // so the whole pattern would require inputting two digits first in order to\n      // decide on whether it matches the input, even when the input is \"80\".\n      //\n      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\n      // even when there's only 1 or 2 digits of the national (significant) number.\n      // To do that, it uses a non-strict pattern matcher written specifically for that.\n      //\n\n      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n        // Before leading digits < 3 matching was implemented:\n        // return true\n        //\n        // After leading digits < 3 matching was implemented:\n        try {\n          return new PatternMatcher(leadingDigitsPattern).match(leadingDigits, {\n            allowOverflow: true\n          }) !== undefined;\n        } catch (error)\n        /* istanbul ignore next */\n        {\n          // There's a slight possibility that there could be some undiscovered bug\n          // in the pattern matcher code. Since the \"leading digits < 3 matching\"\n          // feature is not \"essential\" for operation, it can fall back to the old way\n          // in case of any issues rather than halting the application's execution.\n          console.error(error);\n          return true;\n        }\n      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\n      // available then use the usual regular expression matching.\n      //\n      // The whole pattern is wrapped in round brackets (`()`) because\n      // the pattern can use \"or\" operator (`|`) at the top level of the pattern.\n      //\n\n\n      return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format, international) {\n      return international ? format.internationalFormat() : format.format();\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat(state) {\n      var _this4 = this;\n\n      var _loop2 = function _loop2() {\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) return \"break\";\n          _ref5 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) return \"break\";\n          _ref5 = _i2.value;\n        }\n\n        var format = _ref5; // If this format is currently being used\n        // and is still suitable, then stick to it.\n\n        if (_this4.chosenFormat === format) {\n          return \"break\";\n        } // Sometimes, a formatting rule inserts additional digits in a phone number,\n        // and \"as you type\" formatter can't do that: it should only use the digits\n        // that the user has input.\n        //\n        // For example, in Argentina, there's a format for mobile phone numbers:\n        //\n        // {\n        //    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\n        //    \"leading_digits_patterns\": [\"91\"],\n        //    \"national_prefix_formatting_rule\": \"0$1\",\n        //    \"format\": \"$2 15-$3-$4\",\n        //    \"international_format\": \"$1 $2 $3-$4\"\n        // }\n        //\n        // In that format, `international_format` is used instead of `format`\n        // because `format` inserts `15` in the formatted number,\n        // and `AsYouType` formatter should only use the digits\n        // the user has actually input, without adding any extra digits.\n        // In this case, it wouldn't make a difference, because the `15`\n        // is first stripped when applying `national_prefix_for_parsing`\n        // and then re-added when using `format`, so in reality it doesn't\n        // add any new digits to the number, but to detect that, the code\n        // would have to be more complex: it would have to try formatting\n        // the digits using the format and then see if any digits have\n        // actually been added or removed, and then, every time a new digit\n        // is input, it should re-check whether the chosen format doesn't\n        // alter the digits.\n        //\n        // Google's code doesn't go that far, and so does this library:\n        // it simply requires that a `format` doesn't add any additonal\n        // digits to user's input.\n        //\n        // Also, people in general should move from inputting phone numbers\n        // in national format (possibly with national prefixes)\n        // and use international phone number format instead:\n        // it's a logical thing in the modern age of mobile phones,\n        // globalization and the internet.\n        //\n\n        /* istanbul ignore if */\n\n\n        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this4.getFormatFormat(format, state.international))) {\n          return \"continue\";\n        }\n\n        if (!_this4.createTemplateForFormat(format, state)) {\n          // Remove the format if it can't generate a template.\n          _this4.matchingFormats = _this4.matchingFormats.filter(function (_) {\n            return _ !== format;\n          });\n          return \"continue\";\n        }\n\n        _this4.chosenFormat = format;\n        return \"break\";\n      }; // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n\n\n      _loop: for (var _iterator2 = this.matchingFormats.slice(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref5;\n\n        var _ret = _loop2();\n\n        switch (_ret) {\n          case \"break\":\n            break _loop;\n\n          case \"continue\":\n            continue;\n        }\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national (significant) phone number.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    }\n  }, {\n    key: \"createTemplateForFormat\",\n    value: function createTemplateForFormat(format, state) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (template) {\n        this.setNationalNumberTemplate(template, state);\n        return true;\n      }\n    }\n  }, {\n    key: \"getInternationalPrefixBeforeCountryCallingCode\",\n    value: function getInternationalPrefixBeforeCountryCallingCode(_ref6, options) {\n      var IDDPrefix = _ref6.IDDPrefix,\n          missingPlus = _ref6.missingPlus;\n\n      if (IDDPrefix) {\n        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';\n      }\n\n      if (missingPlus) {\n        return '';\n      }\n\n      return '+';\n    }\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate(state) {\n      if (!this.template) {\n        return;\n      } // `this.template` holds the template for a \"complete\" phone number.\n      // The currently entered phone number is most likely not \"complete\",\n      // so trim all non-populated digits.\n\n\n      var index = -1;\n      var i = 0;\n      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {\n        spacing: false\n      }) : '';\n\n      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }, {\n    key: \"setNationalNumberTemplate\",\n    value: function setNationalNumberTemplate(template, state) {\n      this.nationalNumberTemplate = template;\n      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position\n      // using the old template needs to be reset.\n\n      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (state.international) {\n        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;\n      } else {\n        this.template = template;\n      }\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForFormat\",\n    value: function getTemplateForFormat(format, _ref7) {\n      var nationalSignificantNumber = _ref7.nationalSignificantNumber,\n          international = _ref7.international,\n          nationalPrefix = _ref7.nationalPrefix,\n          complexPrefixBeforeNationalSignificantNumber = _ref7.complexPrefixBeforeNationalSignificantNumber;\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (nationalSignificantNumber.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalSignificantNumber : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format, international);\n      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),\n      // and if a `format` does have a national prefix formatting rule,\n      // then see if that national prefix formatting rule\n      // prepends exactly the same national prefix the user has input.\n      // If that's the case, then use the `format` with the national prefix formatting rule.\n      // Otherwise, use  the `format` without the national prefix formatting rule,\n      // and prepend a national prefix manually to it.\n\n      if (this.shouldTryNationalPrefixFormattingRule(format, {\n        international: international,\n        nationalPrefix: nationalPrefix\n      })) {\n        var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends\n        // national prefix at the start of a national (significant) number,\n        // then such formatting can be used with `AsYouType` formatter.\n        // There seems to be no `else` case: everywhere in metadata,\n        // national prefix formatting rule is national prefix + $1,\n        // or `($1)`, in which case such format isn't even considered\n        // when the user has input a national prefix.\n\n        /* istanbul ignore else */\n\n        if (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\n          numberFormat = numberFormatWithNationalPrefix;\n          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template\n          // with `DIGIT_PLACEHOLDER`s.\n\n          if (nationalPrefix) {\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple\n      // as just a basic national prefix, then just prepend such prefix\n      // before the national (significant) number, optionally spacing\n      // the two with a whitespace.\n\n      if (!nationalPrefixIncludedInTemplate) {\n        if (complexPrefixBeforeNationalSignificantNumber) {\n          // Prepend the prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;\n        } else if (nationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      if (international) {\n        template = applyInternationalSeparatorStyle(template);\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      var result = populateTemplateWithDigits(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);\n\n      if (!result) {\n        // Reset the format.\n        this.resetFormat();\n        return;\n      }\n\n      this.populatedNationalNumberTemplate = result[0];\n      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }]);\n\n  return AsYouTypeFormatter;\n}();\n\nexport { AsYouTypeFormatter as default };","function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport _extractCountryCallingCode from './helpers/extractCountryCallingCode';\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign';\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber';\nimport stripIddPrefix from './helpers/stripIddPrefix';\nimport parseDigits from './helpers/parseDigits';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match\n// different national prefixes.\n// Matches anything that's not a digit or a square bracket.\n\nvar COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/;\n\nvar AsYouTypeParser = /*#__PURE__*/function () {\n  function AsYouTypeParser(_ref) {\n    var defaultCountry = _ref.defaultCountry,\n        defaultCallingCode = _ref.defaultCallingCode,\n        metadata = _ref.metadata,\n        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;\n\n    _classCallCheck(this, AsYouTypeParser);\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.metadata = metadata;\n    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;\n  }\n\n  _createClass(AsYouTypeParser, [{\n    key: \"input\",\n    value: function input(text, state) {\n      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),\n          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),\n          formattedDigits = _extractFormattedDigi2[0],\n          hasPlus = _extractFormattedDigi2[1];\n\n      var digits = parseDigits(formattedDigits); // Checks for a special case: just a leading `+` has been entered.\n\n      var justLeadingPlus;\n\n      if (hasPlus) {\n        if (!state.digits) {\n          state.startInternationalNumber();\n\n          if (!digits) {\n            justLeadingPlus = true;\n          }\n        }\n      }\n\n      if (digits) {\n        this.inputDigits(digits, state);\n      }\n\n      return {\n        digits: digits,\n        justLeadingPlus: justLeadingPlus\n      };\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits, state) {\n      var digits = state.digits;\n      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.\n\n      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:\n      // Some users input their phone number in international format,\n      // but in an \"out-of-country\" dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers as soon as there're at least 3 digits.\n      // Google's library attempts to extract IDD prefix at 3 digits,\n      // so this library just copies that behavior.\n      // I guess that's because the most commot IDD prefixes are\n      // `00` (Europe) and `011` (US).\n      // There exist really long IDD prefixes too:\n      // for example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      // An IDD prefix is extracted here, and then every time when\n      // there's a new digit and the number couldn't be formatted.\n\n      if (hasReceivedThreeLeadingDigits) {\n        this.extractIddPrefix(state);\n      }\n\n      if (this.isWaitingForCountryCallingCode(state)) {\n        if (!this.extractCountryCallingCode(state)) {\n          return;\n        }\n      } else {\n        state.appendNationalSignificantNumberDigits(nextDigits);\n      } // If a phone number is being input in international format,\n      // then it's not valid for it to have a national prefix.\n      // Still, some people incorrectly input such numbers with a national prefix.\n      // In such cases, only attempt to strip a national prefix if the number becomes too long.\n      // (but that is done later, not here)\n\n\n      if (!state.international) {\n        if (!this.hasExtractedNationalSignificantNumber) {\n          this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);\n        }\n      }\n    }\n  }, {\n    key: \"isWaitingForCountryCallingCode\",\n    value: function isWaitingForCountryCallingCode(_ref2) {\n      var international = _ref2.international,\n          callingCode = _ref2.callingCode;\n      return international && !callingCode;\n    } // Extracts a country calling code from a number\n    // being entered in internatonal format.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode(state) {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (countryCallingCode) {\n        state.setCallingCode(countryCallingCode);\n        state.update({\n          nationalSignificantNumber: number\n        });\n        return true;\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(numberingPlan) {\n      if (numberingPlan) {\n        this.hasSelectedNumberingPlan = true;\n\n        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();\n\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);\n      } else {\n        this.hasSelectedNumberingPlan = undefined;\n        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;\n      }\n    }\n    /**\r\n     * Extracts a national (significant) number from user input.\r\n     * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n     * and doesn't apply `national_prefix_transform_rule` after that.\r\n     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n     * @return {boolean} [extracted]\r\n     */\n\n  }, {\n    key: \"extractNationalSignificantNumber\",\n    value: function extractNationalSignificantNumber(nationalDigits, setState) {\n      if (!this.hasSelectedNumberingPlan) {\n        return;\n      }\n\n      var _extractNationalNumbe = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe.nationalPrefix,\n          nationalNumber = _extractNationalNumbe.nationalNumber,\n          carrierCode = _extractNationalNumbe.carrierCode;\n\n      if (nationalNumber === nationalDigits) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n    /**\r\n     * In Google's code this function is called \"attempt to extract longer NDD\".\r\n     * \"Some national prefixes are a substring of others\", they say.\r\n     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n     */\n\n  }, {\n    key: \"extractAnotherNationalSignificantNumber\",\n    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\n      if (!this.hasExtractedNationalSignificantNumber) {\n        return this.extractNationalSignificantNumber(nationalDigits, setState);\n      }\n\n      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\n        return;\n      }\n\n      var _extractNationalNumbe2 = extractNationalNumberFromPossiblyIncompleteNumber(nationalDigits, this.metadata),\n          nationalPrefix = _extractNationalNumbe2.nationalPrefix,\n          nationalNumber = _extractNationalNumbe2.nationalNumber,\n          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,\n      // then it's always extracted as additional digits are added.\n      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\n      // doesn't do anything different from what it currently does.\n      // So, just in case, here's this check, though it doesn't occur.\n\n      /* istanbul ignore if */\n\n\n      if (nationalNumber === prevNationalSignificantNumber) {\n        return;\n      }\n\n      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);\n      return true;\n    }\n  }, {\n    key: \"onExtractedNationalNumber\",\n    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {\n      var complexPrefixBeforeNationalSignificantNumber;\n      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.\n\n      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the\n      // last substring of the `digits`, then it means that it hasn't been altered:\n      // no digits have been removed from the national (significant) number\n      // while applying `national_prefix_transform_rule`.\n      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\n\n      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\n        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple\n        // as just a basic national prefix, then such prefix is stored in\n        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be\n        // prepended \"as is\" to the national (significant) number to produce\n        // a formatted result.\n\n        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,\n        // because `onExtractedNationalNumber()` isn't called\n        // when a national (significant) number hasn't been actually \"extracted\":\n        // when a national (significant) number is equal to the national part of `digits`,\n        // then `onExtractedNationalNumber()` doesn't get called.\n\n        if (prefixBeforeNationalNumber !== nationalPrefix) {\n          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;\n        }\n      }\n\n      setState({\n        nationalPrefix: nationalPrefix,\n        carrierCode: carrierCode,\n        nationalSignificantNumber: nationalSignificantNumber,\n        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,\n        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber\n      }); // `onExtractedNationalNumber()` is only called when\n      // the national (significant) number actually did change.\n\n      this.hasExtractedNationalSignificantNumber = true;\n      this.onNationalSignificantNumberChange();\n    }\n  }, {\n    key: \"reExtractNationalSignificantNumber\",\n    value: function reExtractNationalSignificantNumber(state) {\n      // Attempt to extract a national prefix.\n      //\n      // Some people incorrectly input national prefix\n      // in an international phone number.\n      // For example, some people write British phone numbers as `+44(0)...`.\n      //\n      // Also, in some rare cases, it is valid for a national prefix\n      // to be a part of an international phone number.\n      // For example, mobile phone numbers in Mexico are supposed to be\n      // dialled internationally using a `1` national prefix,\n      // so the national prefix will be part of an international number.\n      //\n      // Quote from:\n      // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n      //\n      // \"Dialing a Mexican cell phone from abroad\n      // When you are calling a cell phone number in Mexico from outside Mexico,\n      // it’s necessary to dial an additional “1” after Mexico’s country code\n      // (which is “52”) and before the area code.\n      // You also ignore the 045, and simply dial the area code and the\n      // cell phone’s number.\n      //\n      // If you don’t add the “1”, you’ll receive a recorded announcement\n      // asking you to redial using it.\n      //\n      // For example, if you are calling from the USA to a cell phone\n      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n      // (Note that this is different to calling a land line in Mexico City\n      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n      //\n      // Google's demo output:\n      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\n      //\n      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, state.update)) {\n        return true;\n      } // If no format matches the phone number, then it could be\n      // \"a really long IDD\" (quote from a comment in Google's library).\n      // An IDD prefix is first extracted when the user has entered at least 3 digits,\n      // and then here — every time when there's a new digit and the number\n      // couldn't be formatted.\n      // For example, in Australia the default IDD prefix is `0011`,\n      // and it could even be as long as `14880011`.\n      //\n      // Could also check `!hasReceivedThreeLeadingDigits` here\n      // to filter out the case when this check duplicates the one\n      // already performed when there're 3 leading digits,\n      // but it's not a big deal, and in most cases there\n      // will be a suitable `format` when there're 3 leading digits.\n      //\n\n\n      if (this.extractIddPrefix(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      } // Google's AsYouType formatter supports sort of an \"autocorrection\" feature\n      // when it \"autocorrects\" numbers that have been input for a country\n      // with that country's calling code.\n      // Such \"autocorrection\" feature looks weird, but different people have been requesting it:\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      // https://github.com/catamphetamine/libphonenumber-js/issues/375\n      // https://github.com/catamphetamine/libphonenumber-js/issues/316\n\n\n      if (this.fixMissingPlus(state)) {\n        this.extractCallingCodeAndNationalSignificantNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"extractIddPrefix\",\n    value: function extractIddPrefix(state) {\n      // An IDD prefix can't be present in a number written with a `+`.\n      // Also, don't re-extract an IDD prefix if has already been extracted.\n      var international = state.international,\n          IDDPrefix = state.IDDPrefix,\n          digits = state.digits,\n          nationalSignificantNumber = state.nationalSignificantNumber;\n\n      if (international || IDDPrefix) {\n        return;\n      } // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n\n\n      var numberWithoutIDD = stripIddPrefix(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\n        // If an IDD prefix was stripped then convert the IDD-prefixed number\n        // to international number for subsequent parsing.\n        state.update({\n          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\n        });\n        this.startInternationalNumber(state);\n        return true;\n      }\n    }\n  }, {\n    key: \"fixMissingPlus\",\n    value: function fixMissingPlus(state) {\n      if (!state.international) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n            newCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (newCallingCode) {\n          state.update({\n            missingPlus: true\n          });\n          this.startInternationalNumber(state);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber(state) {\n      state.startInternationalNumber(); // If a national (significant) number has been extracted before, reset it.\n\n      if (state.nationalSignificantNumber) {\n        state.resetNationalSignificantNumber();\n        this.onNationalSignificantNumberChange();\n        this.hasExtractedNationalSignificantNumber = undefined;\n      }\n    }\n  }, {\n    key: \"extractCallingCodeAndNationalSignificantNumber\",\n    value: function extractCallingCodeAndNationalSignificantNumber(state) {\n      if (this.extractCountryCallingCode(state)) {\n        // `this.extractCallingCode()` is currently called when the number\n        // couldn't be formatted during the standard procedure.\n        // Normally, the national prefix would be re-extracted\n        // for an international number if such number couldn't be formatted,\n        // but since it's already not able to be formatted,\n        // there won't be yet another retry, so also extract national prefix here.\n        this.extractNationalSignificantNumber(state.getNationalDigits(), state.update);\n      }\n    }\n  }]);\n\n  return AsYouTypeParser;\n}();\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\n\nexport { AsYouTypeParser as default };\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nfunction _extractFormattedDigitsAndPlus(text) {\n  // Extract a formatted phone number part from text.\n  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n  if (extractedNumber[0] === '+') {\n    return [extractedNumber.slice('+'.length), true];\n  }\n\n  return [extractedNumber];\n}\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\n\n\nexport function extractFormattedDigitsAndPlus(text) {\n  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),\n      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),\n      formattedDigits = _extractFormattedDigi4[0],\n      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part\n  // can possibly be a part of some valid phone number\n  // then parse phone number characters from a formatted phone number.\n\n\n  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\n    formattedDigits = '';\n  }\n\n  return [formattedDigits, hasPlus];\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nimport Metadata from './metadata';\nimport PhoneNumber from './PhoneNumber';\nimport AsYouTypeState from './AsYouTypeState';\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter';\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser';\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType = /*#__PURE__*/function () {\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.metadata = new Metadata(metadata);\n\n    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),\n        _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),\n        defaultCountry = _this$getCountryAndCa2[0],\n        defaultCallingCode = _this$getCountryAndCa2[1];\n\n    this.defaultCountry = defaultCountry;\n    this.defaultCallingCode = defaultCallingCode;\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"getCountryAndCallingCode\",\n    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {\n      // Set `defaultCountry` and `defaultCallingCode` options.\n      var defaultCountry;\n      var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n      if (optionsOrDefaultCountry) {\n        if (_typeof(optionsOrDefaultCountry) === 'object') {\n          defaultCountry = optionsOrDefaultCountry.defaultCountry;\n          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n        } else {\n          defaultCountry = optionsOrDefaultCountry;\n        }\n      }\n\n      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\n        defaultCountry = undefined;\n      }\n\n      if (defaultCallingCode) {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            defaultCountry = '001';\n          }\n        }\n      }\n\n      return [defaultCountry, defaultCallingCode];\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var _this$parser$input = this.parser.input(text, this.state),\n          digits = _this$parser$input.digits,\n          justLeadingPlus = _this$parser$input.justLeadingPlus;\n\n      if (justLeadingPlus) {\n        this.formattedOutput = '+';\n      } else if (digits) {\n        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.\n\n        if (this.state.nationalSignificantNumber) {\n          this.formatter.narrowDownMatchingFormats(this.state);\n        }\n\n        var formattedNationalNumber;\n\n        if (this.metadata.hasSelectedNumberingPlan()) {\n          formattedNationalNumber = this.formatter.format(digits, this.state);\n        }\n\n        if (formattedNationalNumber === undefined) {\n          // See if another national (significant) number could be re-extracted.\n          if (this.parser.reExtractNationalSignificantNumber(this.state)) {\n            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.\n\n            var nationalDigits = this.state.getNationalDigits();\n\n            if (nationalDigits) {\n              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);\n            }\n          }\n        }\n\n        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();\n      }\n\n      return this.formattedOutput;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _this = this;\n\n      this.state = new AsYouTypeState({\n        onCountryChange: function onCountryChange(country) {\n          // Before version `1.6.0`, the official `AsYouType` formatter API\n          // included the `.country` property of an `AsYouType` instance.\n          // Since that property (along with the others) have been moved to\n          // `this.state`, `this.country` property is emulated for compatibility\n          // with the old versions.\n          _this.country = country;\n        },\n        onCallingCodeChange: function onCallingCodeChange(country, callingCode) {\n          _this.metadata.selectNumberingPlan(country, callingCode);\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n\n          _this.parser.reset(_this.metadata.numberingPlan);\n        }\n      });\n      this.formatter = new AsYouTypeFormatter({\n        state: this.state,\n        metadata: this.metadata\n      });\n      this.parser = new AsYouTypeParser({\n        defaultCountry: this.defaultCountry,\n        defaultCallingCode: this.defaultCallingCode,\n        metadata: this.metadata,\n        state: this.state,\n        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {\n          _this.determineTheCountryIfNeeded();\n\n          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);\n        }\n      });\n      this.state.reset(this.defaultCountry, this.defaultCallingCode);\n      this.formattedOutput = '';\n      return this;\n    }\n    /**\r\n     * Returns `true` if the phone number is being input in international format.\r\n     * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.state.international;\n    }\n    /**\r\n     * Returns the \"calling code\" part of the phone number when it's being input\r\n     * in an international format.\r\n     * If no valid calling code has been entered so far, returns `undefined`.\r\n     * @return {string} [callingCode]\r\n     */\n\n  }, {\n    key: \"getCallingCode\",\n    value: function getCallingCode() {\n      // If the number is being input in national format and some \"default calling code\"\n      // has been passed to `AsYouType` constructor, then `this.state.callingCode`\n      // is equal to that \"default calling code\".\n      //\n      // If the number is being input in national format and no \"default calling code\"\n      // has been passed to `AsYouType` constructor, then returns `undefined`,\n      // even if a \"default country\" has been passed to `AsYouType` constructor.\n      //\n      if (this.isInternational()) {\n        return this.state.callingCode;\n      }\n    } // A legacy alias.\n\n  }, {\n    key: \"getCountryCallingCode\",\n    value: function getCountryCallingCode() {\n      return this.getCallingCode();\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * Returns `undefined` if no phone number has been input yet.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"getCountry\",\n    value: function getCountry() {\n      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.\n\n      if (digits) {\n        return this._getCountry();\n      }\n    }\n    /**\r\n     * Returns a two-letter country code of the phone number.\r\n     * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n     * @return {string} [country]\r\n     */\n\n  }, {\n    key: \"_getCountry\",\n    value: function _getCountry() {\n      var country = this.state.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        // `AsYouType.getCountry()` returns `undefined`\n        // for \"non-geographic\" phone numbering plans.\n        if (country === '001') {\n          return;\n        }\n      }\n\n      return country;\n    }\n  }, {\n    key: \"determineTheCountryIfNeeded\",\n    value: function determineTheCountryIfNeeded() {\n      // Suppose a user enters a phone number in international format,\n      // and there're several countries corresponding to that country calling code,\n      // and a country has been derived from the number, and then\n      // a user enters one more digit and the number is no longer\n      // valid for the derived country, so the country should be re-derived\n      // on every new digit in those cases.\n      //\n      // If the phone number is being input in national format,\n      // then it could be a case when `defaultCountry` wasn't specified\n      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\n      // and that \"calling code\" could correspond to a \"non-geographic entity\",\n      // or there could be several countries corresponding to that country calling code.\n      // In those cases, `this.country` is `undefined` and should be derived\n      // from the number. Again, if country calling code is ambiguous, then\n      // `this.country` should be re-derived with each new digit.\n      //\n      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\n        this.determineTheCountry();\n      }\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      var _this2 = this;\n\n      if (this.isInternational()) {\n        var prefix = function prefix(text) {\n          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {\n            spacing: text ? true : false\n          }) + text;\n        };\n\n        var callingCode = this.state.callingCode;\n\n        if (!callingCode) {\n          return prefix(\"\".concat(this.state.getDigitsWithoutInternationalPrefix()));\n        }\n\n        if (!formattedNationalNumber) {\n          return prefix(callingCode);\n        }\n\n        return prefix(\"\".concat(callingCode, \" \").concat(formattedNationalNumber));\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumberWithPrefix\",\n    value: function getNonFormattedNationalNumberWithPrefix() {\n      var _this$state = this.state,\n          nationalSignificantNumber = _this$state.nationalSignificantNumber,\n          complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,\n          nationalPrefix = _this$state.nationalPrefix;\n      var number = nationalSignificantNumber;\n      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;\n\n      if (prefix) {\n        number = prefix + number;\n      }\n\n      return number;\n    }\n  }, {\n    key: \"getNonFormattedNumber\",\n    value: function getNonFormattedNumber() {\n      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;\n      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      var number = this.getNonFormattedNumber();\n\n      if (number) {\n        return number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n      }\n    }\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var callingCode = this.state.callingCode;\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);\n      return countryCodes && countryCodes.length > 1;\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.state.setCountry(getCountryByCallingCode(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));\n    }\n    /**\r\n     * Returns a E.164 phone number value for the user's input.\r\n     *\r\n     * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n     * it will return `\"+12223334444\"`.\r\n     *\r\n     * For international phone number input, it will also auto-correct\r\n     * some minor errors such as using a national prefix when writing\r\n     * an international phone number. For example, if the user inputs\r\n     * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n     * `\"+447400000000\"` phone number value.\r\n     *\r\n     * Will return `undefined` if no digits have been input,\r\n     * or when inputting a phone number in national format and no\r\n     * default country or default \"country calling code\" have been set.\r\n     *\r\n     * @return {string} [value]\r\n     */\n\n  }, {\n    key: \"getNumberValue\",\n    value: function getNumberValue() {\n      var _this$state2 = this.state,\n          digits = _this$state2.digits,\n          callingCode = _this$state2.callingCode,\n          country = _this$state2.country,\n          nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.\n\n      if (!digits) {\n        return;\n      }\n\n      if (this.isInternational()) {\n        if (callingCode) {\n          return '+' + callingCode + nationalSignificantNumber;\n        } else {\n          return '+' + digits;\n        }\n      } else {\n        if (country || callingCode) {\n          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;\n          return '+' + callingCode_ + nationalSignificantNumber;\n        }\n      }\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      var _this$state3 = this.state,\n          nationalSignificantNumber = _this$state3.nationalSignificantNumber,\n          carrierCode = _this$state3.carrierCode,\n          callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`\n      // with the only change that it return `undefined` in case of a\n      // \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\n\n      var country = this._getCountry();\n\n      if (!nationalSignificantNumber) {\n        return;\n      }\n\n      if (!country && !callingCode) {\n        return;\n      }\n\n      var phoneNumber = new PhoneNumber(country || callingCode, nationalSignificantNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * Returns `true` if the phone number is \"possible\".\r\n     * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isPossible();\n    }\n    /**\r\n     * Returns `true` if the phone number is \"valid\".\r\n     * Is just a shortcut for `PhoneNumber.isValid()`.\r\n     * @return {boolean}\r\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var phoneNumber = this.getNumber();\n\n      if (!phoneNumber) {\n        return false;\n      }\n\n      return phoneNumber.isValid();\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.state.nationalSignificantNumber;\n    }\n    /**\r\n     * Returns the phone number characters entered by the user.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getChars\",\n    value: function getChars() {\n      return (this.state.international ? '+' : '') + this.state.digits;\n    }\n    /**\r\n     * Returns the template for the formatted phone number.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };","import { getCountryCallingCode } from 'libphonenumber-js/core';\nexport function getInputValuePrefix(_ref) {\n  var country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata;\n  return country && international && !withCountryCallingCode ? \"+\".concat(getCountryCallingCode(country, metadata)) : '';\n}\nexport function removeInputValuePrefix(value, prefix) {\n  if (prefix) {\n    value = value.slice(prefix.length);\n\n    if (value[0] === ' ') {\n      value = value.slice(1);\n    }\n  }\n\n  return value;\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputSmart` is a \"smarter\" implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's and maintains the caret's position in the process.\r\n   * The caret positioning is maintained using `input-format` library.\r\n   * Relies on being run in a DOM environment for calling caret positioning functions.\r\n   */\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"withCountryCallingCode\", \"metadata\"]);\n\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      }); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\r\n   * `InputBasic` is the most basic implementation of a `Component`\r\n   * that can be passed to `<PhoneInput/>`. It parses and formats\r\n   * the user's input but doesn't control the caret in the process:\r\n   * when erasing or inserting digits in the middle of a phone number\r\n   * the caret usually jumps to the end (this is the expected behavior).\r\n   * Why does `InputBasic` exist when there's `InputSmart`?\r\n   * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n   * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n   */\n  function InputBasic(_ref, ref) {\n    var value = _ref.value,\n        onChange = _ref.onChange,\n        country = _ref.country,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        metadata = _ref.metadata,\n        Input = _ref.inputComponent,\n        rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"country\", \"international\", \"withCountryCallingCode\", \"metadata\", \"inputComponent\"]);\n\n    var prefix = getInputValuePrefix({\n      country: country,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      metadata: metadata\n    });\n\n    var _onChange = useCallback(function (event) {\n      var newValue = parseIncompletePhoneNumber(event.target.value); // By default, if a value is something like `\"(123)\"`\n      // then Backspace would only erase the rightmost brace\n      // becoming something like `\"(123\"`\n      // which would give the same `\"123\"` value\n      // which would then be formatted back to `\"(123)\"`\n      // and so a user wouldn't be able to erase the phone number.\n      // Working around this issue with this simple hack.\n\n      if (newValue === value) {\n        var newValueFormatted = format(prefix, newValue, country, metadata);\n\n        if (newValueFormatted.indexOf(event.target.value) === 0) {\n          // Trim the last digit (or plus sign).\n          newValue = newValue.slice(0, -1);\n        }\n      }\n\n      onChange(newValue);\n    }, [prefix, value, onChange, country, metadata]);\n\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      value: format(prefix, value, country, metadata),\n      onChange: _onChange\n    }));\n  }\n\n  InputBasic = React.forwardRef(InputBasic);\n  InputBasic.propTypes = {\n    /**\r\n     * The parsed phone number.\r\n     * \"Parsed\" not in a sense of \"E.164\"\r\n     * but rather in a sense of \"having only\r\n     * digits and possibly a leading plus character\".\r\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n     */\n    value: PropTypes.string.isRequired,\n\n    /**\r\n     * A function of `value: string`.\r\n     * Updates the `value` property.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (e.g. `(800) 555 35 35`).\r\n     * E.g. \"US\", \"RU\", etc.\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (e.g. `+7 800 555 35 35`)\r\n     * Perhaps the `country` property should have been called `defaultCountry`\r\n     * because if `value` is an international number then `country` is ignored.\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType.isRequired\n  };\n  InputBasic.defaultProps = {\n    metadata: defaultMetadata,\n    inputComponent: 'input'\n  };\n  return InputBasic;\n}\nexport default createInput();\n\nfunction format(prefix, value, country, metadata) {\n  return removeInputValuePrefix(formatIncompletePhoneNumber(prefix + value, country, metadata), prefix);\n}","import AsYouType from './AsYouType';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}","/**\r\n * Creates Unicode flag from a two-letter ISO country code.\r\n * https://stackoverflow.com/questions/24050671/how-to-put-japan-flag-character-in-a-string\r\n * @param  {string} country — A two-letter ISO country code (case-insensitive).\r\n * @return {string}\r\n */\nexport default function getCountryFlag(country) {\n  return getRegionalIndicatorSymbol(country[0]) + getRegionalIndicatorSymbol(country[1]);\n}\n/**\r\n * Converts a letter to a Regional Indicator Symbol.\r\n * @param  {string} letter\r\n * @return {string}\r\n */\n\nfunction getRegionalIndicatorSymbol(letter) {\n  return String.fromCodePoint(0x1F1E6 - 65 + letter.toUpperCase().charCodeAt(0));\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport getUnicodeFlagIcon from 'country-flag-icons/unicode';\nexport default function CountrySelect(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"onChange\", \"options\"]);\n\n  var onChange_ = useCallback(function (event) {\n    var value = event.target.value;\n    onChange(value === 'ZZ' ? undefined : value);\n  }, [onChange]);\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]); // \"ZZ\" means \"International\".\n  // (HTML requires each `<option/>` have some string `value`).\n\n  return React.createElement(\"select\", _extends({}, rest, {\n    value: value || 'ZZ',\n    onChange: onChange_\n  }), options.map(function (_ref2) {\n    var value = _ref2.value,\n        label = _ref2.label,\n        divider = _ref2.divider;\n    return React.createElement(\"option\", {\n      key: divider ? '|' : value || 'ZZ',\n      value: divider ? '|' : value || 'ZZ',\n      disabled: divider ? true : false,\n      style: divider ? DIVIDER_STYLE : undefined\n    }, label);\n  }));\n}\nCountrySelect.propTypes = {\n  /**\r\n   * A two-letter country code.\r\n   * Example: \"US\", \"RU\", etc.\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string`.\r\n   * Updates the `value` property.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  // `<select/>` options.\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string,\n    divider: PropTypes.bool\n  })).isRequired\n};\nvar DIVIDER_STYLE = {\n  fontSize: '1px',\n  backgroundColor: 'currentColor',\n  color: 'inherit'\n};\nexport function CountrySelectWithIcon(_ref3) {\n  var value = _ref3.value,\n      options = _ref3.options,\n      className = _ref3.className,\n      Icon = _ref3.iconComponent,\n      getIconAspectRatio = _ref3.getIconAspectRatio,\n      Arrow = _ref3.arrowComponent,\n      unicodeFlags = _ref3.unicodeFlags,\n      rest = _objectWithoutProperties(_ref3, [\"value\", \"options\", \"className\", \"iconComponent\", \"getIconAspectRatio\", \"arrowComponent\", \"unicodeFlags\"]);\n\n  var selectedOption = useMemo(function () {\n    return getSelectedOption(options, value);\n  }, [options, value]);\n  return React.createElement(\"div\", {\n    className: \"PhoneInputCountry\"\n  }, React.createElement(CountrySelect, _extends({}, rest, {\n    value: value,\n    options: options,\n    className: classNames('PhoneInputCountrySelect', className)\n  })), unicodeFlags && value && React.createElement(\"div\", {\n    className: \"PhoneInputCountryIconUnicode\"\n  }, getUnicodeFlagIcon(value)), !(unicodeFlags && value) && React.createElement(Icon, {\n    country: value,\n    label: selectedOption && selectedOption.label,\n    aspectRatio: unicodeFlags ? 1 : undefined\n  }), React.createElement(Arrow, null));\n}\nCountrySelectWithIcon.propTypes = {\n  // Country flag component.\n  iconComponent: PropTypes.elementType,\n  // Select arrow component.\n  arrowComponent: PropTypes.elementType.isRequired,\n  // Set to `true` to render Unicode flag icons instead of SVG images.\n  unicodeFlags: PropTypes.bool\n};\nCountrySelectWithIcon.defaultProps = {\n  arrowComponent: function arrowComponent() {\n    return React.createElement(\"div\", {\n      className: \"PhoneInputCountrySelectArrow\"\n    });\n  }\n};\n\nfunction getSelectedOption(options, value) {\n  for (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref4 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref4 = _i.value;\n    }\n\n    var option = _ref4;\n\n    if (!option.divider && option.value === value) {\n      return option;\n    }\n  }\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames'; // Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\n\nexport default function FlagComponent(_ref) {\n  var country = _ref.country,\n      countryName = _ref.countryName,\n      flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      rest = _objectWithoutProperties(_ref, [\"country\", \"countryName\", \"flags\", \"flagUrl\"]);\n\n  if (flags && flags[country]) {\n    return flags[country]({\n      title: countryName\n    });\n  }\n\n  return React.createElement(\"img\", _extends({}, rest, {\n    alt: countryName,\n    role: countryName ? undefined : \"presentation\",\n    src: flagUrl.replace('{XX}', country).replace('{xx}', country.toLowerCase())\n  }));\n}\nFlagComponent.propTypes = {\n  // The country to be selected by default.\n  // Two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: PropTypes.string.isRequired,\n  // Will be HTML `title` attribute of the `<img/>`.\n  countryName: PropTypes.string.isRequired,\n  // Country flag icon components.\n  // By default flag icons are inserted as `<img/>`s\n  // with their `src` pointed to `country-flag-icons` gitlab pages website.\n  // There might be cases (e.g. an offline application)\n  // where having a large (3 megabyte) `<svg/>` flags\n  // bundle is more appropriate.\n  // `import flags from 'react-phone-number-input/flags'`.\n  flags: PropTypes.objectOf(PropTypes.elementType),\n  // A URL for a country flag icon.\n  // By default it points to `country-flag-icons` gitlab pages website.\n  flagUrl: PropTypes.string.isRequired\n};","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nexport default function InternationalIcon(_ref) {\n  var aspectRatio = _ref.aspectRatio,\n      rest = _objectWithoutProperties(_ref, [\"aspectRatio\"]);\n\n  if (aspectRatio === 1) {\n    return React.createElement(InternationalIcon1x1, rest);\n  } else {\n    return React.createElement(InternationalIcon3x2, rest);\n  }\n}\nInternationalIcon.propTypes = {\n  title: PropTypes.string.isRequired,\n  aspectRatio: PropTypes.number\n}; // 3x2.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon3x2(_ref2) {\n  var title = _ref2.title,\n      rest = _objectWithoutProperties(_ref2, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 75 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeMiterlimit: \"10\"\n  }, React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M47.2,36.1C48.1,36,49,36,50,36c7.4,0,14,1.7,18.5,4.3\"\n  }), React.createElement(\"path\", {\n    d: \"M68.6,9.6C64.2,12.3,57.5,14,50,14c-7.4,0-14-1.7-18.5-4.3\"\n  }), React.createElement(\"line\", {\n    x1: \"26\",\n    y1: \"25\",\n    x2: \"74\",\n    y2: \"25\"\n  }), React.createElement(\"line\", {\n    x1: \"50\",\n    y1: \"1\",\n    x2: \"50\",\n    y2: \"49\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.3,48.7c1.2,0.2,2.5,0.3,3.7,0.3c13.3,0,24-10.7,24-24S63.3,1,50,1S26,11.7,26,25c0,2,0.3,3.9,0.7,5.8\"\n  }), React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    d: \"M46.8,48.2c1,0.6,2.1,0.8,3.2,0.8c6.6,0,12-10.7,12-24S56.6,1,50,1S38,11.7,38,25c0,1.4,0.1,2.7,0.2,4c0,0.1,0,0.2,0,0.2\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"none\",\n    fill: \"currentColor\",\n    d: \"M12.4,17.9c2.9-2.9,5.4-4.8,0.3-11.2S4.1,5.2,1.3,8.1C-2,11.4,1.1,23.5,13.1,35.6s24.3,15.2,27.5,11.9c2.8-2.8,7.8-6.3,1.4-11.5s-8.3-2.6-11.2,0.3c-2,2-7.2-2.2-11.7-6.7S10.4,19.9,12.4,17.9z\"\n  }));\n}\n\nInternationalIcon3x2.propTypes = {\n  title: PropTypes.string.isRequired\n}; // 1x1.\n// Using `<title/>` in `<svg/>`s:\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title\n\nfunction InternationalIcon1x1(_ref3) {\n  var title = _ref3.title,\n      rest = _objectWithoutProperties(_ref3, [\"title\"]);\n\n  return React.createElement(\"svg\", _extends({}, rest, {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\"\n  }), React.createElement(\"title\", null, title), React.createElement(\"g\", {\n    className: \"PhoneInputInternationalIconGlobe\",\n    stroke: \"currentColor\",\n    fill: \"none\",\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\"\n  }, React.createElement(\"path\", {\n    d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\"\n  }), React.createElement(\"path\", {\n    d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\"\n  }), React.createElement(\"path\", {\n    d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\"\n  }), React.createElement(\"path\", {\n    d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\"\n  }), React.createElement(\"line\", {\n    x1: \"27.8\",\n    y1: \"0.85\",\n    x2: \"27.8\",\n    y2: \"34.61\"\n  }), React.createElement(\"line\", {\n    x1: \"15.2\",\n    y1: \"22.23\",\n    x2: \"49.15\",\n    y2: \"22.23\"\n  })), React.createElement(\"path\", {\n    className: \"PhoneInputInternationalIconPhone\",\n    stroke: \"transparent\",\n    fill: \"currentColor\",\n    d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\"\n  }));\n}\n\nInternationalIcon1x1.propTypes = {\n  title: PropTypes.string.isRequired\n};","import { isSupportedCountry } from 'libphonenumber-js/core';\nexport { getCountries } from 'libphonenumber-js/core';\n/**\r\n * Sorts country `<select/>` options.\r\n * Can move some country `<select/>` options\r\n * to the top of the list, for example.\r\n * @param  {object[]} countryOptions — Country `<select/>` options.\r\n * @param  {string[]} [countryOptionsOrder] — Country `<select/>` options order. Example: `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n * @return {object[]}\r\n */\n\nexport function sortCountryOptions(options, order) {\n  if (!order) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  for (var _iterator = order, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      (function () {\n        var countryCode = void 0;\n\n        if (element === '🌐') {\n          countryCode = undefined;\n        } else {\n          countryCode = element;\n        } // Find the position of the option.\n\n\n        var index = options.indexOf(options.filter(function (option) {\n          return option.value === countryCode;\n        })[0]); // Get the option.\n\n        var option = options[index]; // Remove the option from its default position.\n\n        options.splice(index, 1); // Add the option on top.\n\n        appendTo.push(option);\n      })();\n    }\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\nexport function getSupportedCountryOptions(countryOptions, metadata) {\n  if (countryOptions) {\n    countryOptions = countryOptions.filter(function (option) {\n      switch (option) {\n        case '🌐':\n        case '|':\n        case '...':\n        case '…':\n          return true;\n\n        default:\n          return isCountrySupportedWithError(option, metadata);\n      }\n    });\n\n    if (countryOptions.length > 0) {\n      return countryOptions;\n    }\n  }\n}\nexport function isCountrySupportedWithError(country, metadata) {\n  if (isSupportedCountry(country, metadata)) {\n    return true;\n  } else {\n    console.error(\"Country not found: \".concat(country));\n    return false;\n  }\n}\nexport function getSupportedCountries(countries, metadata) {\n  if (countries) {\n    countries = countries.filter(function (country) {\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    if (countries.length === 0) {\n      countries = undefined;\n    }\n  }\n\n  return countries;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport DefaultInternationalIcon from './InternationalIcon';\nimport Flag from './Flag';\nexport function createCountryIconComponent(_ref) {\n  var flags = _ref.flags,\n      flagUrl = _ref.flagUrl,\n      FlagComponent = _ref.flagComponent,\n      InternationalIcon = _ref.internationalIcon;\n\n  function CountryIcon(_ref2) {\n    var country = _ref2.country,\n        label = _ref2.label,\n        aspectRatio = _ref2.aspectRatio; // `aspectRatio` is currently a hack for the default \"International\" icon\n    // to render it as a square when Unicode flag icons are used.\n    // So `aspectRatio` property is only used with the default \"International\" icon.\n\n    var _aspectRatio = InternationalIcon === DefaultInternationalIcon ? aspectRatio : undefined;\n\n    return React.createElement(\"div\", {\n      className: classNames('PhoneInputCountryIcon', {\n        'PhoneInputCountryIcon--square': _aspectRatio === 1,\n        'PhoneInputCountryIcon--border': country\n      })\n    }, country ? React.createElement(FlagComponent, {\n      country: country,\n      countryName: label,\n      flags: flags,\n      flagUrl: flagUrl,\n      className: \"PhoneInputCountryIconImg\"\n    }) : React.createElement(InternationalIcon, {\n      title: label,\n      aspectRatio: _aspectRatio,\n      className: \"PhoneInputCountryIconImg\"\n    }));\n  }\n\n  CountryIcon.propTypes = {\n    country: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    aspectRatio: PropTypes.number\n  };\n  return CountryIcon;\n}\nexport default createCountryIconComponent({\n  // Must be equal to `defaultProps.flagUrl` in `./PhoneInputWithCountry.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  flagComponent: Flag,\n  internationalIcon: DefaultInternationalIcon\n});","import { getCountryCallingCode, Metadata } from 'libphonenumber-js/core';\nvar ONLY_DIGITS_REGEXP = /^\\d+$/;\nexport default function getInternationalPhoneNumberPrefix(country, metadata) {\n  // Standard international phone number prefix: \"+\" and \"country calling code\".\n  var prefix = '+' + getCountryCallingCode(country, metadata); // Get \"leading digits\" for a phone number of the country.\n  // If there're \"leading digits\" then they can be part of the prefix too.\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(country);\n\n  if (metadata.numberingPlan.leadingDigits() && ONLY_DIGITS_REGEXP.test(metadata.numberingPlan.leadingDigits())) {\n    prefix += metadata.numberingPlan.leadingDigits();\n  }\n\n  return prefix;\n}","import parsePhoneNumber_, { getCountryCallingCode, AsYouType, Metadata } from 'libphonenumber-js/core';\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix';\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\nexport function getPreSelectedCountry(_ref) {\n  var value = _ref.value,\n      phoneNumber = _ref.phoneNumber,\n      defaultCountry = _ref.defaultCountry,\n      getAnyCountry = _ref.getAnyCountry,\n      countries = _ref.countries,\n      required = _ref.required,\n      metadata = _ref.metadata;\n  var country; // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } else if (defaultCountry) {\n    if (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\n      country = defaultCountry;\n    }\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && required && countries && countries.length > 0) {\n    country = getAnyCountry(); // noCountryMatchesTheNumber = true\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\nexport function getCountrySelectOptions(_ref2) {\n  var countries = _ref2.countries,\n      countryNames = _ref2.countryNames,\n      addInternationalOption = _ref2.addInternationalOption,\n      compareStringsLocales = _ref2.compareStringsLocales,\n      _compareStrings = _ref2.compareStrings; // Default country name comparator uses `String.localeCompare()`.\n\n  if (!_compareStrings) {\n    _compareStrings = compareStrings;\n  } // Generates a `<Select/>` option for each country.\n\n\n  var countrySelectOptions = countries.map(function (country) {\n    return {\n      value: country,\n      // All `locale` country names included in this library\n      // include all countries (this is checked at build time).\n      // The only case when a country name might be missing\n      // is when a developer supplies their own `labels` property.\n      // To guard against such cases, a missing country name\n      // is substituted by country code.\n      label: countryNames[country] || country\n    };\n  }); // Sort the list of countries alphabetically.\n\n  countrySelectOptions.sort(function (a, b) {\n    return _compareStrings(a.label, b.label, compareStringsLocales);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (addInternationalOption) {\n    countrySelectOptions.unshift({\n      label: countryNames.ZZ\n    });\n  }\n\n  return countrySelectOptions;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\nexport function parsePhoneNumber(value, metadata) {\n  return parsePhoneNumber_(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\nexport function generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\nexport function getPhoneDigitsForNewCountry(phoneDigits, _ref3) {\n  var prevCountry = _ref3.prevCountry,\n      newCountry = _ref3.newCountry,\n      metadata = _ref3.metadata,\n      useNationalFormat = _ref3.useNationalFormat;\n\n  if (prevCountry === newCountry) {\n    return phoneDigits;\n  } // If `parsed_input` is empty\n  // then no need to migrate anything.\n\n\n  if (!phoneDigits) {\n    if (useNationalFormat) {\n      return '';\n    } else {\n      // If `phoneDigits` is empty then set `phoneDigits` to\n      // `+{getCountryCallingCode(newCountry)}`.\n      return getInternationalPhoneNumberPrefix(newCountry, metadata);\n    }\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `phoneDigits` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (newCountry) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (phoneDigits[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (useNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\n        // if (derived_country === newCountry) {\n        // \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\n          return stripCountryCallingCode(phoneDigits, newCountry, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return phoneDigits.slice(1)\n      }\n\n      if (prevCountry) {\n        var newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata);\n\n        if (phoneDigits.indexOf(newCountryPrefix) === 0) {\n          return phoneDigits;\n        } else {\n          return newCountryPrefix;\n        }\n      } else {\n        var defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata); // If `phoneDigits`'s country calling code part is the same\n        // as for the new `country`, then leave `phoneDigits` as is.\n\n        if (phoneDigits.indexOf(defaultValue) === 0) {\n          return phoneDigits;\n        } // If `phoneDigits`'s country calling code part is not the same\n        // as for the new `country`, then set `phoneDigits` to\n        // `+{getCountryCallingCode(newCountry)}`.\n\n\n        return defaultValue;\n      } // // If the international phone number already contains\n      // // any country calling code then trim the country calling code part.\n      // // (that could also be the newly selected country phone code prefix as well)\n      // // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\n      // // (e.g. if a user enters an international number\n      // //  not belonging to any of the reduced `countries` list).\n      // phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\n      // // Prepend country calling code prefix\n      // // for the newly selected country.\n      // return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\n\n    }\n  } // If switching to \"International\" from a country.\n  else {\n    // If the phone number was entered in national format.\n    if (phoneDigits[0] !== '+') {\n      // Format the national phone number as an international one.\n      // The phone number entered not necessarily even starts with\n      // the previously selected country phone prefix.\n      // Even if the phone number belongs to whole another country\n      // it will still be parsed into some national phone number.\n      //\n      // Ignore the now-uncovered `|| ''` code branch:\n      // previously `e164()` function could return an empty string\n      // even when `phoneDigits` were not empty.\n      // Now it always returns some `value` when there're any `phoneDigits`.\n      // Still, didn't remove the `|| ''` code branch just in case\n      // that logic changes somehow in some future, so there're no\n      // possible bugs related to that.\n      //\n      // (ignore the `|| ''` code branch)\n\n      /* istanbul ignore next */\n      return e164(phoneDigits, prevCountry, metadata) || '';\n    }\n  }\n\n  return phoneDigits;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nexport function e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // Return a E.164 phone number.\n    //\n    // Could return `number` \"as is\" here, but there's a possibility\n    // that some user might incorrectly input an international number\n    // with a \"national prefix\". Such numbers aren't considered valid,\n    // but `libphonenumber-js` is \"forgiving\" when it comes to parsing\n    // user's input, and this input component follows that behavior.\n    //\n\n\n    var asYouType = new AsYouType(country, metadata);\n    asYouType.input(number); // This function would return `undefined` only when `number` is `\"+\"`,\n    // but at this point it is known that `number` is not `\"+\"`.\n\n    return asYouType.getNumberValue();\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n  // The situation when `country` is `undefined`\n  // and a non-international phone number is passed\n  // to this function shouldn't happen.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata); //\n  // Even if no \"national (significant) number\" digits have been input,\n  // still return a non-`undefined` value.\n  // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\n  //\n  // For example, if the user has selected country `US` and entered `\"1\"`\n  // then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\n  // digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\n  // because otherwise the app would think that the input is empty and mark it as such\n  // while in reality it isn't empty, which might be thought of as a \"bug\", or just\n  // a \"weird\" behavior.\n  //\n  // if (partial_national_significant_number) {\n\n  return \"+\".concat(getCountryCallingCode(country, metadata)).concat(partial_national_significant_number || ''); // }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\nexport function trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(country); // Return the last \"possible length\".\n\n  return metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryForPartialE164Number(partialE164Number, _ref4) {\n  var country = _ref4.country,\n      countries = _ref4.countries,\n      required = _ref4.required,\n      metadata = _ref4.metadata;\n\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && !required && !couldNumberBelongToCountry(partialE164Number, country, metadata)) {\n    return undefined;\n  } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\nexport function onPhoneDigitsChange(phoneDigits, _ref5) {\n  var prevPhoneDigits = _ref5.prevPhoneDigits,\n      country = _ref5.country,\n      defaultCountry = _ref5.defaultCountry,\n      countryRequired = _ref5.countryRequired,\n      getAnyCountry = _ref5.getAnyCountry,\n      countries = _ref5.countries,\n      international = _ref5.international,\n      limitMaxLength = _ref5.limitMaxLength,\n      countryCallingCodeEditable = _ref5.countryCallingCodeEditable,\n      metadata = _ref5.metadata;\n\n  if (international && countryCallingCodeEditable === false) {\n    var prefix = getInternationalPhoneNumberPrefix(country, metadata); // The `<input/>` value must start with the country calling code.\n\n    if (phoneDigits.indexOf(prefix) !== 0) {\n      var _value; // If a phone number input is declared as\n      // `international` and `withCountryCallingCode`,\n      // then it's gonna be non-empty even before the user\n      // has input anything in it.\n      // This will result in its contents (the country calling code part)\n      // being selected when the user tabs into such field.\n      // If the user then starts inputting the national part digits,\n      // then `<input/>` value changes from `+xxx` to `y`\n      // because inputting anything while having the `<input/>` value\n      // selected results in erasing the `<input/>` value.\n      // So, the component handles such case by restoring\n      // the intended `<input/>` value: `+xxxy`.\n      // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n\n\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        phoneDigits = prefix + phoneDigits;\n        _value = e164(phoneDigits, country, metadata);\n      } else {\n        phoneDigits = prefix;\n      }\n\n      return {\n        phoneDigits: phoneDigits,\n        value: _value,\n        country: country\n      };\n    }\n  } // If `international` property is `false`, then it means\n  // \"enforce national-only format during input\",\n  // so, if that's the case, then remove all `+` characters,\n  // but only if some country is currently selected.\n  // (not if \"International\" country is selected).\n\n\n  if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n    phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata);\n  } // Trim the input to not exceed the maximum possible number length.\n\n\n  if (phoneDigits && country && limitMaxLength) {\n    phoneDigits = trimNumber(phoneDigits, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country,\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n  // Also, force-prepend a `+` sign if international\n  // phone number input format is set.\n\n\n  if (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\n    phoneDigits = '+' + phoneDigits;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\n    if (international) {\n      country = undefined;\n    } else {\n      country = defaultCountry;\n    }\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value;\n\n  if (phoneDigits) {\n    if (phoneDigits[0] === '+') {\n      if (phoneDigits === '+') {\n        value = undefined;\n      } else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\n        // Selected a `country` but started inputting an\n        // international phone number for another country.\n        // Even though the input value is non-empty,\n        // the `value` is assumed `undefined` in such case.\n        // The `country` will be reset (or re-selected)\n        // immediately after such mismatch has been detected\n        // by the phone number input component, and `value`\n        // will be set to the currently entered international prefix.\n        //\n        // For example, if selected `country` `\"US\"`\n        // and started inputting phone number `\"+2\"`\n        // then `value` `undefined` will be returned from this function,\n        // and then, immediately after that, `country` will be reset\n        // and the `value` will be set to `\"+2\"`.\n        //\n        value = undefined;\n      } else {\n        value = e164(phoneDigits, country, metadata);\n      }\n    } else {\n      value = e164(phoneDigits, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected,\n  //  because there could be several countries corresponding to one country calling code)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, {\n      country: country,\n      countries: countries,\n      metadata: metadata\n    }); // If `international` property is `false`, then it means\n    // \"enforce national-only format during input\",\n    // so, if that's the case, then remove all `+` characters,\n    // but only if some country is currently selected.\n    // (not if \"International\" country is selected).\n\n    if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n      phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata); // Re-calculate `value` because `phoneDigits` has changed.\n\n      value = e164(phoneDigits, country, metadata);\n    }\n  }\n\n  if (!country && countryRequired) {\n    country = defaultCountry || getAnyCountry();\n  }\n\n  return {\n    phoneDigits: phoneDigits,\n    country: country,\n    value: value\n  };\n}\n\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\n  // Handle the case when a user might have pasted\n  // a phone number in international format.\n  if (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\n    // Create \"as you type\" formatter.\n    var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n    formatter.input(input); // Return the parsed partial national phone number.\n\n    var phoneNumber = formatter.getNumber();\n\n    if (phoneNumber) {\n      // Transform the number to a national one,\n      // and remove all non-digits.\n      return phoneNumber.formatNational().replace(/\\D/g, '');\n    } else {\n      return '';\n    }\n  } else {\n    // Just remove the `+` sign.\n    return input.replace(/\\D/g, '');\n  }\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\n  var formatter = new AsYouType(null, metadata);\n  formatter.input(number); // // `001` is a special \"non-geograpical entity\" code\n  // // in Google's `libphonenumber` library.\n  // if (formatter.getCountry() === '001') {\n  // \treturn\n  // }\n\n  return formatter.getCountry();\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\n\nexport function compareStrings(a, b, locales) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b, locales);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\nexport function stripCountryCallingCode(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < countryCallingCodePrefix.length) {\n      if (countryCallingCodePrefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(countryCallingCodePrefix) === 0) {\n        return number.slice(countryCallingCodePrefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\n\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\nexport function couldNumberBelongToCountry(number, country, metadata) {\n  var intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata);\n  var i = 0;\n\n  while (i < number.length && i < intlPhoneNumberPrefix.length) {\n    if (number[i] !== intlPhoneNumberPrefix[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\n\nexport function getInitialPhoneDigits(_ref6) {\n  var value = _ref6.value,\n      phoneNumber = _ref6.phoneNumber,\n      defaultCountry = _ref6.defaultCountry,\n      international = _ref6.international,\n      useNationalFormat = _ref6.useNationalFormat,\n      metadata = _ref6.metadata; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `useNationalFormat` is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  } // If `international` property is `true`,\n  // meaning \"enforce international phone number format\",\n  // then always show country calling code in the input field.\n\n\n  if (!value && international && defaultCountry) {\n    return getInternationalPhoneNumberPrefix(defaultCountry, metadata);\n  }\n\n  return value;\n}","function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { getInitialPhoneDigits, getCountryForPartialE164Number, parsePhoneNumber } from './phoneInputHelpers';\nimport { isCountrySupportedWithError, getSupportedCountries } from './countries';\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n  var metadata = props.metadata,\n      countries = props.countries,\n      newDefaultCountry = props.defaultCountry,\n      newValue = props.value,\n      newReset = props.reset,\n      international = props.international,\n      displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n      initialValueFormat = props.initialValueFormat;\n  var prevDefaultCountry = prevProps.defaultCountry,\n      prevValue = prevProps.value,\n      prevReset = prevProps.reset;\n  var country = state.country,\n      value = state.value,\n      hasUserSelectedACountry = state.hasUserSelectedACountry;\n\n  var _getInitialPhoneDigits = function _getInitialPhoneDigits(parameters) {\n    return getInitialPhoneDigits(_objectSpread({}, parameters, {\n      international: international,\n      useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n      metadata: metadata\n    }));\n  }; // Some users requested a way to reset the component\n  // (both number `<input/>` and country `<select/>`).\n  // Whenever `reset` property changes both number `<input/>`\n  // and country `<select/>` are reset.\n  // It's not implemented as some instance `.reset()` method\n  // because `ref` is forwarded to `<input/>`.\n  // It's also not replaced with just resetting `country` on\n  // external `value` reset, because a user could select a country\n  // and then not input any `value`, and so the selected country\n  // would be \"stuck\", if not using this `reset` property.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n\n  if (newReset !== prevReset) {\n    return {\n      phoneDigits: _getInitialPhoneDigits({\n        value: undefined,\n        defaultCountry: newDefaultCountry\n      }),\n      value: undefined,\n      country: newDefaultCountry,\n      hasUserSelectedACountry: undefined\n    };\n  } // `value` is the value currently shown in the component:\n  // it's stored in the component's `state`, and it's not the `value` property.\n  // `prevValue` is \"previous `value` property\".\n  // `newValue` is \"new `value` property\".\n  // If the default country changed\n  // (e.g. in case of ajax GeoIP detection after page loaded)\n  // then select it, but only if the user hasn't already manually\n  // selected a country, and no phone number has been manually entered so far.\n  // Because if the user has already started inputting a phone number\n  // then they're okay with no country being selected at all (\"International\")\n  // and they don't want to be disturbed, don't want their input to be screwed, etc.\n\n\n  if (newDefaultCountry !== prevDefaultCountry) {\n    var isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata);\n\n    var noValueHasBeenEnteredByTheUser = // By default, \"no value has been entered\" means `value` is `undefined`.\n    !value || // When `international` is `true`, and some country has been pre-selected,\n    // then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n    // so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n    // doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n    international && value === _getInitialPhoneDigits({\n      value: undefined,\n      defaultCountry: prevDefaultCountry\n    }); // Only update the `defaultCountry` property if no phone number\n    // has been entered by the user or pre-set by the application.\n\n\n    var noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser;\n\n    if (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n      return {\n        country: newDefaultCountry,\n        // If `phoneDigits` is empty, then automatically select the new `country`\n        // and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n        // The code assumes that \"no phone number has been entered by the user\",\n        // and no `value` property has been passed, so the `phoneNumber` parameter\n        // of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n        phoneDigits: _getInitialPhoneDigits({\n          value: undefined,\n          defaultCountry: newDefaultCountry\n        }),\n        // `value` is `undefined` and it stays so.\n        value: undefined\n      };\n    }\n  } // If a new `value` is set externally.\n  // (e.g. as a result of an ajax API request\n  //  to get user's phone after page loaded)\n  // The first part — `newValue !== prevValue` —\n  // is basically `props.value !== prevProps.value`\n  // so it means \"if value property was changed externally\".\n  // The second part — `newValue !== value` —\n  // is for ignoring the `getDerivedStateFromProps()` call\n  // which happens in `this.onChange()` right after `this.setState()`.\n  // If this `getDerivedStateFromProps()` call isn't ignored\n  // then the country flag would reset on each input.\n\n\n  if (newValue !== prevValue && newValue !== value) {\n    var phoneNumber;\n    var parsedCountry;\n\n    if (newValue) {\n      phoneNumber = parsePhoneNumber(newValue, metadata);\n      var supportedCountries = getSupportedCountries(countries, metadata);\n\n      if (phoneNumber && phoneNumber.country) {\n        // Ignore `else` because all countries are supported in metadata.\n\n        /* istanbul ignore next */\n        if (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n          parsedCountry = phoneNumber.country;\n        }\n      } else {\n        parsedCountry = getCountryForPartialE164Number(newValue, {\n          country: undefined,\n          countries: supportedCountries,\n          metadata: metadata\n        });\n      }\n    }\n\n    var hasUserSelectedACountryUpdate;\n\n    if (!newValue) {\n      // Reset `hasUserSelectedACountry` flag in `state`.\n      hasUserSelectedACountryUpdate = {\n        hasUserSelectedACountry: undefined\n      };\n    }\n\n    return _objectSpread({}, hasUserSelectedACountryUpdate, {\n      phoneDigits: _getInitialPhoneDigits({\n        phoneNumber: phoneNumber,\n        value: newValue,\n        defaultCountry: newDefaultCountry\n      }),\n      value: newValue,\n      country: newValue ? parsedCountry : newDefaultCountry\n    });\n  } // `defaultCountry` didn't change.\n  // `value` didn't change.\n  // `phoneDigits` didn't change, because `value` didn't change.\n  //\n  // So no need to update state.\n\n}","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect';\nimport Flag from './Flag';\nimport InternationalIcon from './InternationalIcon';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './helpers/countries';\nimport { createCountryIconComponent } from './CountryIcon';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport { getPreSelectedCountry, getCountrySelectOptions as _getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, getPhoneDigitsForNewCountry, getInitialPhoneDigits, onPhoneDigitsChange, e164 } from './helpers/phoneInputHelpers';\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps';\n\nvar PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n\n  function PhoneNumberInput_(props) {\n    var _this;\n\n    _classCallCheck(this, PhoneNumberInput_);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhoneNumberInput_).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n          international = _this$props.international,\n          metadata = _this$props.metadata,\n          onChange = _this$props.onChange,\n          focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n          prevPhoneDigits = _this$state.phoneDigits,\n          prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n          defaultCountry = _this$props2.defaultCountry,\n          onChange = _this$props2.onChange,\n          addInternationalOption = _this$props2.addInternationalOption,\n          international = _this$props2.international,\n          limitMaxLength = _this$props2.limitMaxLength,\n          countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n          metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n          countries = _this$state2.countries,\n          prevPhoneDigits = _this$state2.phoneDigits,\n          currentlySelectedCountry = _this$state2.country;\n\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n        prevPhoneDigits: prevPhoneDigits,\n        country: currentlySelectedCountry,\n        countryRequired: !addInternationalOption,\n        defaultCountry: defaultCountry,\n        getAnyCountry: function getAnyCountry() {\n          return _this.getFirstSupportedCountry({\n            countries: countries\n          });\n        },\n        countries: countries,\n        international: international,\n        limitMaxLength: limitMaxLength,\n        countryCallingCodeEditable: countryCallingCodeEditable,\n        metadata: metadata\n      }),\n          phoneDigits = _onPhoneDigitsChange.phoneDigits,\n          country = _onPhoneDigitsChange.country,\n          value = _onPhoneDigitsChange.value;\n\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n\n      _this.setState(stateUpdate, // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n\n      var onFocus = _this.props.onFocus;\n\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n\n      _this._onBlur();\n\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n\n      var countrySelectProps = _this.props.countrySelectProps;\n\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n\n    var _this$props3 = _this.props,\n        _value = _this$props3.value,\n        labels = _this$props3.labels,\n        _international = _this$props3.international,\n        _addInternationalOption = _this$props3.addInternationalOption,\n        displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props3.initialValueFormat,\n        _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n        _defaultCountry = _this$props4.defaultCountry,\n        _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || getCountries(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n          international = _this$props5.international,\n          countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n          countryOptionsOrder = _this$props5.countryOptionsOrder,\n          addInternationalOption = _this$props5.addInternationalOption,\n          labels = _this$props5.labels,\n          locales = _this$props5.locales,\n          metadata = _this$props5.metadata;\n      return useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(_getCountrySelectOptions({\n          countries: countries || getCountries(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          name = _this$props6.name,\n          disabled = _this$props6.disabled,\n          autoComplete = _this$props6.autoComplete,\n          style = _this$props6.style,\n          className = _this$props6.className,\n          inputRef = _this$props6.inputRef,\n          inputComponent = _this$props6.inputComponent,\n          numberInputProps = _this$props6.numberInputProps,\n          smartCaret = _this$props6.smartCaret,\n          CountrySelectComponent = _this$props6.countrySelectComponent,\n          countrySelectProps = _this$props6.countrySelectProps,\n          ContainerComponent = _this$props6.containerComponent,\n          defaultCountry = _this$props6.defaultCountry,\n          countriesProperty = _this$props6.countries,\n          countryOptionsOrder = _this$props6.countryOptionsOrder,\n          labels = _this$props6.labels,\n          flags = _this$props6.flags,\n          flagComponent = _this$props6.flagComponent,\n          flagUrl = _this$props6.flagUrl,\n          addInternationalOption = _this$props6.addInternationalOption,\n          internationalIcon = _this$props6.internationalIcon,\n          displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n          initialValueFormat = _this$props6.initialValueFormat,\n          onCountryChange = _this$props6.onCountryChange,\n          limitMaxLength = _this$props6.limitMaxLength,\n          countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n          focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n          reset = _this$props6.reset,\n          metadata = _this$props6.metadata,\n          international = _this$props6.international,\n          locales = _this$props6.locales,\n          rest = _objectWithoutProperties(_this$props6, [\"name\", \"disabled\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"]);\n\n      var _this$state3 = this.state,\n          country = _this$state3.country,\n          countries = _this$state3.countries,\n          phoneDigits = _this$state3.phoneDigits,\n          isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return React.createElement(ContainerComponent, {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused\n        })\n      }, React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        iconComponent: this.CountryIcon\n      })), React.createElement(InputComponent, _extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    value: function getDerivedStateFromProps(props, state) {\n      return _objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\n\nvar PhoneNumberInput = React.forwardRef(function (props, ref) {\n  return React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: PropTypes.string,\n\n  /**\r\n   * A function of `value: string?`.\r\n   *\r\n   * Updates the `value` property as the user inputs a phone number.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n\n  /**\r\n   * Set to `true` to disable both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: PropTypes.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: PropTypes.bool,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType.isRequired,\n\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: PropTypes.elementType.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n\n  /**\r\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n   * the caret position is moved right before the next available digit skipping\r\n   * any punctuation in between. This is called \"smart\" caret positioning.\r\n   * Another case would be the phone number format changing as a result of\r\n   * the user inserting the digit somewhere in the middle, which would require\r\n   * re-positioning the caret because all digit positions have changed.\r\n   * This \"smart\" caret positioning feature can be turned off by passing\r\n   * `smartCaret={false}` property: use it in case of any possible issues\r\n   * with caret position during phone number input.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: PropTypes.bool,\n\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: PropTypes.bool.isRequired,\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType.isRequired,\n\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: PropTypes.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Country `<select/>` component.\r\n   */\n  countrySelectComponent: CountrySelect,\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false,\n\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\nexport default PhoneNumberInput;\nvar countrySelectOptionsMemo;\nvar countrySelectOptionsMemoDependencies;\n\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n  if (!countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n    countrySelectOptionsMemo = generator();\n    countrySelectOptionsMemoDependencies = dependencies;\n  }\n\n  return countrySelectOptionsMemo;\n}\n\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var i = 0;\n\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport labels from '../locale/en.json';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport PhoneInput from './PhoneInputWithCountry';\nexport function createPhoneInput(defaultMetadata) {\n  var PhoneInputDefault = React.forwardRef(function (props, ref) {\n    return React.createElement(PhoneInput, _extends({\n      ref: ref\n    }, props));\n  });\n  PhoneInputDefault.propTypes = {\n    metadata: metadataPropType.isRequired,\n    labels: labelsPropType.isRequired\n  };\n  PhoneInputDefault.defaultProps = {\n    metadata: defaultMetadata,\n    labels: labels\n  };\n  return PhoneInputDefault;\n}\nexport default createPhoneInput();","import metadata from 'libphonenumber-js/metadata.min.json';\nimport { parsePhoneNumber as _parsePhoneNumber, formatPhoneNumber as _formatPhoneNumber, formatPhoneNumberIntl as _formatPhoneNumberIntl, isValidPhoneNumber as _isValidPhoneNumber, isPossiblePhoneNumber as _isPossiblePhoneNumber, getCountries as _getCountries, getCountryCallingCode as _getCountryCallingCode, isSupportedCountry as _isSupportedCountry } from '../core/index';\nimport { createPhoneInput } from '../modules/PhoneInputWithCountryDefault';\n\nfunction call(func, _arguments) {\n  var args = Array.prototype.slice.call(_arguments);\n  args.push(metadata);\n  return func.apply(this, args);\n}\n\nexport default createPhoneInput(metadata);\nexport function parsePhoneNumber() {\n  return call(_parsePhoneNumber, arguments);\n}\nexport function formatPhoneNumber() {\n  return call(_formatPhoneNumber, arguments);\n}\nexport function formatPhoneNumberIntl() {\n  return call(_formatPhoneNumberIntl, arguments);\n}\nexport function isValidPhoneNumber() {\n  return call(_isValidPhoneNumber, arguments);\n}\nexport function isPossiblePhoneNumber() {\n  return call(_isPossiblePhoneNumber, arguments);\n}\nexport function getCountries() {\n  return call(_getCountries, arguments);\n}\nexport function getCountryCallingCode() {\n  return call(_getCountryCallingCode, arguments);\n}\nexport function isSupportedCountry() {\n  return call(_isSupportedCountry, arguments);\n}"],"sourceRoot":""}